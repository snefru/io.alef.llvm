// Generated from io/alef/llvm/LLVM.g4 by ANTLR 4.5.1
package io.alef.llvm;

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.List;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class LLVMParser extends Parser {
	public static final int
			T__0 = 1, T__1 = 2, T__2 = 3, T__3 = 4, T__4 = 5, T__5 = 6, T__6 = 7, T__7 = 8, T__8 = 9,
			T__9 = 10, T__10 = 11, T__11 = 12, T__12 = 13, T__13 = 14, T__14 = 15, T__15 = 16, T__16 = 17,
			T__17 = 18, T__18 = 19, T__19 = 20, T__20 = 21, T__21 = 22, T__22 = 23, T__23 = 24,
			T__24 = 25, T__25 = 26, T__26 = 27, T__27 = 28, T__28 = 29, T__29 = 30, T__30 = 31,
			T__31 = 32, T__32 = 33, T__33 = 34, T__34 = 35, T__35 = 36, T__36 = 37, T__37 = 38,
			T__38 = 39, T__39 = 40, T__40 = 41, T__41 = 42, T__42 = 43, T__43 = 44, T__44 = 45,
			T__45 = 46, T__46 = 47, T__47 = 48, T__48 = 49, T__49 = 50, T__50 = 51, T__51 = 52,
			T__52 = 53, T__53 = 54, T__54 = 55, T__55 = 56, T__56 = 57, T__57 = 58, T__58 = 59,
			T__59 = 60, T__60 = 61, T__61 = 62, T__62 = 63, T__63 = 64, T__64 = 65, T__65 = 66,
			T__66 = 67, T__67 = 68, T__68 = 69, T__69 = 70, T__70 = 71, T__71 = 72, T__72 = 73,
			T__73 = 74, T__74 = 75, T__75 = 76, T__76 = 77, T__77 = 78, T__78 = 79, T__79 = 80,
			T__80 = 81, T__81 = 82, T__82 = 83, T__83 = 84, T__84 = 85, T__85 = 86, T__86 = 87,
			T__87 = 88, T__88 = 89, T__89 = 90, T__90 = 91, T__91 = 92, T__92 = 93, T__93 = 94,
			T__94 = 95, T__95 = 96, T__96 = 97, T__97 = 98, T__98 = 99, T__99 = 100, T__100 = 101,
			T__101 = 102, T__102 = 103, T__103 = 104, T__104 = 105, T__105 = 106, T__106 = 107,
			T__107 = 108, T__108 = 109, T__109 = 110, T__110 = 111, T__111 = 112, T__112 = 113,
			T__113 = 114, T__114 = 115, T__115 = 116, T__116 = 117, T__117 = 118, T__118 = 119,
			T__119 = 120, T__120 = 121, T__121 = 122, T__122 = 123, T__123 = 124, T__124 = 125,
			T__125 = 126, T__126 = 127, T__127 = 128, T__128 = 129, T__129 = 130, T__130 = 131,
			T__131 = 132, T__132 = 133, T__133 = 134, T__134 = 135, T__135 = 136, T__136 = 137,
			T__137 = 138, T__138 = 139, T__139 = 140, T__140 = 141, T__141 = 142, T__142 = 143,
			T__143 = 144, T__144 = 145, T__145 = 146, T__146 = 147, T__147 = 148, T__148 = 149,
			T__149 = 150, T__150 = 151, T__151 = 152, T__152 = 153, T__153 = 154, T__154 = 155,
			T__155 = 156, T__156 = 157, T__157 = 158, T__158 = 159, T__159 = 160, T__160 = 161,
			T__161 = 162, AtomicOrdering = 163, AttributeGroupID = 164, UnamedAddress = 165,
			CallingConvention = 166, IntegerType = 167, Label = 168, Linkage = 169, LocalIdentifier = 170,
			MetadataIdentifier = 171, DllStorageClass = 172, Scope = 173, Visibility = 174,
			String = 175, ThreadLocal = 176, FPPredicate = 177, IntPredicate = 178, CharArrayLiteral = 179,
			ComdatIdentifier = 180, FloatLiteral = 181, IntegerLiteral = 182, FastMathsFlag = 183,
			GlobalIdentifier = 184, WS = 185, COMMENT = 186;
	public static final int
			RULE_module = 0, RULE_argumentList = 1, RULE_basicBlock = 2, RULE_clause = 3,
			RULE_comdat = 4, RULE_entity = 5, RULE_functionAttribute = 6, RULE_functionHeader = 7,
			RULE_functionBody = 8, RULE_instruction = 9, RULE_operandBundle = 10,
			RULE_parameter = 11, RULE_parameterAttribute = 12, RULE_parameterList = 13,
			RULE_returnAttribute = 14, RULE_section = 15, RULE_statement = 16, RULE_type = 17,
			RULE_typedValue = 18, RULE_value = 19, RULE_index = 20;
	public static final String[] ruleNames = {
			"module", "argumentList", "basicBlock", "clause", "comdat", "entity",
			"functionAttribute", "functionHeader", "functionBody", "instruction",
			"operandBundle", "parameter", "parameterAttribute", "parameterList", "returnAttribute",
			"section", "statement", "type", "typedValue", "value", "index"
	};
	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	public static final String _serializedATN =
			"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u00bc\u04eb\4\2\t" +
					"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13" +
					"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22" +
					"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\3\2\6\2.\n\2\r\2\16\2/\3\3\3" +
					"\3\3\3\7\3\65\n\3\f\3\16\38\13\3\3\4\5\4;\n\4\3\4\6\4>\n\4\r\4\16\4?\3" +
					"\5\3\5\3\5\3\5\5\5F\n\5\3\6\3\6\3\6\3\6\3\6\5\6M\n\6\3\7\3\7\3\7\3\7\3" +
					"\7\3\7\5\7U\n\7\3\b\3\b\3\b\7\bZ\n\b\f\b\16\b]\13\b\3\b\5\b`\n\b\3\b\3" +
					"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b" +
					"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3" +
					"\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u008f\n\b\3\t\5\t\u0092\n\t\3\t" +
					"\5\t\u0095\n\t\3\t\5\t\u0098\n\t\3\t\5\t\u009b\n\t\3\t\7\t\u009e\n\t\f" +
					"\t\16\t\u00a1\13\t\3\t\3\t\3\t\3\t\5\t\u00a7\n\t\3\t\3\t\5\t\u00ab\n\t" +
					"\3\t\7\t\u00ae\n\t\f\t\16\t\u00b1\13\t\3\t\5\t\u00b4\n\t\3\t\5\t\u00b7" +
					"\n\t\3\n\3\n\6\n\u00bb\n\n\r\n\16\n\u00bc\3\n\3\n\3\13\3\13\3\13\3\13" +
					"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13" +
					"\3\13\3\13\3\13\3\13\7\13\u00d7\n\13\f\13\16\13\u00da\13\13\3\13\3\13" +
					"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u00e5\n\13\f\13\16\13\u00e8\13" +
					"\13\3\13\3\13\3\13\3\13\5\13\u00ee\n\13\3\13\7\13\u00f1\n\13\f\13\16\13" +
					"\u00f4\13\13\3\13\3\13\3\13\3\13\5\13\u00fa\n\13\3\13\3\13\7\13\u00fe" +
					"\n\13\f\13\16\13\u0101\13\13\3\13\3\13\3\13\3\13\7\13\u0107\n\13\f\13" +
					"\16\13\u010a\13\13\3\13\3\13\5\13\u010e\n\13\3\13\3\13\3\13\3\13\3\13" +
					"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13" +
					"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13" +
					"\7\13\u0131\n\13\f\13\16\13\u0134\13\13\3\13\3\13\3\13\3\13\3\13\3\13" +
					"\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u0142\n\13\f\13\16\13\u0145\13\13" +
					"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u0152\n\13" +
					"\f\13\16\13\u0155\13\13\5\13\u0157\n\13\3\13\3\13\3\13\3\13\3\13\3\13" +
					"\3\13\3\13\3\13\7\13\u0162\n\13\f\13\16\13\u0165\13\13\5\13\u0167\n\13" +
					"\3\13\3\13\3\13\3\13\5\13\u016d\n\13\3\13\5\13\u0170\n\13\3\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\5\13\u0179\n\13\3\13\5\13\u017c\n\13\3\13\3\13" +
					"\3\13\3\13\3\13\3\13\3\13\5\13\u0185\n\13\3\13\5\13\u0188\n\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\3\13\5\13\u0191\n\13\3\13\5\13\u0194\n\13\3\13" +
					"\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u019d\n\13\f\13\16\13\u01a0\13\13" +
					"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u01a9\n\13\f\13\16\13\u01ac\13" +
					"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u01b5\n\13\f\13\16\13\u01b8" +
					"\13\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u01c1\n\13\f\13\16\13\u01c4" +
					"\13\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u01cd\n\13\f\13\16\13\u01d0" +
					"\13\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u01d9\n\13\3\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\5\13\u01e2\n\13\3\13\3\13\3\13\3\13\3\13\3\13" +
					"\3\13\5\13\u01eb\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u01f4\n" +
					"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3" +
					"\13\3\13\3\13\7\13\u0222\n\13\f\13\16\13\u0225\13\13\3\13\3\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\3\13\7\13\u02a0\n\13\f\13\16\13\u02a3\13\13\3" +
					"\13\3\13\3\13\3\13\7\13\u02a9\n\13\f\13\16\13\u02ac\13\13\3\13\3\13\3" +
					"\13\6\13\u02b1\n\13\r\13\16\13\u02b2\3\13\5\13\u02b6\n\13\3\13\3\13\7" +
					"\13\u02ba\n\13\f\13\16\13\u02bd\13\13\3\13\5\13\u02c0\n\13\3\13\7\13\u02c3" +
					"\n\13\f\13\16\13\u02c6\13\13\3\13\3\13\3\13\3\13\5\13\u02cc\n\13\3\13" +
					"\3\13\7\13\u02d0\n\13\f\13\16\13\u02d3\13\13\3\13\7\13\u02d6\n\13\f\13" +
					"\16\13\u02d9\13\13\3\13\3\13\5\13\u02dd\n\13\3\13\3\13\3\13\5\13\u02e2" +
					"\n\13\3\13\3\13\3\13\5\13\u02e7\n\13\3\13\3\13\5\13\u02eb\n\13\3\13\3" +
					"\13\3\13\3\13\3\13\3\13\5\13\u02f3\n\13\3\13\3\13\3\13\5\13\u02f8\n\13" +
					"\3\13\3\13\3\13\3\13\5\13\u02fe\n\13\3\13\3\13\3\13\3\13\5\13\u0304\n" +
					"\13\5\13\u0306\n\13\3\f\3\f\3\f\3\f\3\f\7\f\u030d\n\f\f\f\16\f\u0310\13" +
					"\f\3\f\3\f\3\r\3\r\7\r\u0316\n\r\f\r\16\r\u0319\13\r\3\r\5\r\u031c\n\r" +
					"\3\r\5\r\u031f\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3" +
					"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5" +
					"\16\u0339\n\16\3\17\3\17\3\17\7\17\u033e\n\17\f\17\16\17\u0341\13\17\3" +
					"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3" +
					"\20\3\20\5\20\u0353\n\20\3\21\3\21\3\21\3\21\3\22\3\22\5\22\u035b\n\22" +
					"\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23" +
					"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23" +
					"\3\23\3\23\7\23\u037b\n\23\f\23\16\23\u037e\13\23\3\23\3\23\3\23\3\23" +
					"\3\23\3\23\3\23\7\23\u0387\n\23\f\23\16\23\u038a\13\23\3\23\3\23\3\23" +
					"\3\23\3\23\3\23\5\23\u0392\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\7\23" +
					"\u039b\n\23\f\23\16\23\u039e\13\23\5\23\u03a0\n\23\3\23\5\23\u03a3\n\23" +
					"\3\23\7\23\u03a6\n\23\f\23\16\23\u03a9\13\23\3\24\3\24\3\24\3\25\3\25" +
					"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\7\25" +
					"\u03bd\n\25\f\25\16\25\u03c0\13\25\3\25\3\25\3\25\3\25\3\25\3\25\7\25" +
					"\u03c8\n\25\f\25\16\25\u03cb\13\25\3\25\3\25\3\25\3\25\3\25\3\25\7\25" +
					"\u03d3\n\25\f\25\16\25\u03d6\13\25\3\25\3\25\3\25\3\25\5\25\u03dc\n\25" +
					"\3\25\5\25\u03df\n\25\3\25\5\25\u03e2\n\25\3\25\3\25\3\25\3\25\3\25\3" +
					"\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3" +
					"\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3" +
					"\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3" +
					"\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3" +
					"\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3" +
					"\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3" +
					"\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\6\25\u0446\n\25\r\25\16\25" +
					"\u0447\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\6\25\u0453\n\25\r" +
					"\25\16\25\u0454\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25" +
					"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25" +
					"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25" +
					"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25" +
					"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25" +
					"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25" +
					"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25" +
					"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25" +
					"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25" +
					"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25" +
					"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u04e7\n\25\3\26\3\26\3\26\2\3" +
					"$\27\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*\2\4\3\2qs\4\2\u00ad" +
					"\u00ad\u00b8\u00b8\u05ed\2-\3\2\2\2\4\61\3\2\2\2\6:\3\2\2\2\bE\3\2\2\2" +
					"\nG\3\2\2\2\fT\3\2\2\2\16\u008e\3\2\2\2\20\u0091\3\2\2\2\22\u00b8\3\2" +
					"\2\2\24\u0305\3\2\2\2\26\u0307\3\2\2\2\30\u031e\3\2\2\2\32\u0338\3\2\2" +
					"\2\34\u033a\3\2\2\2\36\u0352\3\2\2\2 \u0354\3\2\2\2\"\u035a\3\2\2\2$\u0391" +
					"\3\2\2\2&\u03aa\3\2\2\2(\u04e6\3\2\2\2*\u04e8\3\2\2\2,.\5\f\7\2-,\3\2" +
					"\2\2./\3\2\2\2/-\3\2\2\2/\60\3\2\2\2\60\3\3\2\2\2\61\66\5&\24\2\62\63" +
					"\7\3\2\2\63\65\5&\24\2\64\62\3\2\2\2\658\3\2\2\2\66\64\3\2\2\2\66\67\3" +
					"\2\2\2\67\5\3\2\2\28\66\3\2\2\29;\7\u00aa\2\2:9\3\2\2\2:;\3\2\2\2;=\3" +
					"\2\2\2<>\5\"\22\2=<\3\2\2\2>?\3\2\2\2?=\3\2\2\2?@\3\2\2\2@\7\3\2\2\2A" +
					"B\7\4\2\2BF\5&\24\2CD\7\5\2\2DF\5&\24\2EA\3\2\2\2EC\3\2\2\2F\t\3\2\2\2" +
					"GH\7\3\2\2HL\7\6\2\2IJ\7\7\2\2JK\7\u00b6\2\2KM\7\b\2\2LI\3\2\2\2LM\3\2" +
					"\2\2M\13\3\2\2\2NO\7\t\2\2OP\5\20\t\2PQ\5\22\n\2QU\3\2\2\2RS\7\n\2\2S" +
					"U\5\20\t\2TN\3\2\2\2TR\3\2\2\2U\r\3\2\2\2V_\7\u00a6\2\2W[\7\13\2\2XZ\5" +
					"\16\b\2YX\3\2\2\2Z]\3\2\2\2[Y\3\2\2\2[\\\3\2\2\2\\^\3\2\2\2][\3\2\2\2" +
					"^`\7\f\2\2_W\3\2\2\2_`\3\2\2\2`\u008f\3\2\2\2ab\7\r\2\2b\u008f\7\u00b8" +
					"\2\2cd\7\r\2\2de\7\16\2\2e\u008f\7\u00b8\2\2fg\7\17\2\2g\u008f\7\u00b8" +
					"\2\2hi\7\17\2\2ij\7\16\2\2j\u008f\7\u00b8\2\2k\u008f\7\20\2\2l\u008f\7" +
					"\21\2\2m\u008f\7\22\2\2n\u008f\7\23\2\2o\u008f\7\24\2\2p\u008f\7\25\2" +
					"\2q\u008f\7\26\2\2r\u008f\7\27\2\2s\u008f\7\30\2\2t\u008f\7\31\2\2u\u008f" +
					"\7\32\2\2v\u008f\7\33\2\2w\u008f\7\34\2\2x\u008f\7\35\2\2y\u008f\7\36" +
					"\2\2z\u008f\7\37\2\2{\u008f\7 \2\2|\u008f\7!\2\2}\u008f\7\"\2\2~\u008f" +
					"\7#\2\2\177\u008f\7$\2\2\u0080\u008f\7%\2\2\u0081\u008f\7&\2\2\u0082\u008f" +
					"\7\'\2\2\u0083\u008f\7(\2\2\u0084\u008f\7)\2\2\u0085\u008f\7*\2\2\u0086" +
					"\u008f\7+\2\2\u0087\u008f\7,\2\2\u0088\u008f\7-\2\2\u0089\u008f\7.\2\2" +
					"\u008a\u008f\7/\2\2\u008b\u008f\7\60\2\2\u008c\u008f\7\61\2\2\u008d\u008f" +
					"\7\u00b1\2\2\u008eV\3\2\2\2\u008ea\3\2\2\2\u008ec\3\2\2\2\u008ef\3\2\2" +
					"\2\u008eh\3\2\2\2\u008ek\3\2\2\2\u008el\3\2\2\2\u008em\3\2\2\2\u008en" +
					"\3\2\2\2\u008eo\3\2\2\2\u008ep\3\2\2\2\u008eq\3\2\2\2\u008er\3\2\2\2\u008e" +
					"s\3\2\2\2\u008et\3\2\2\2\u008eu\3\2\2\2\u008ev\3\2\2\2\u008ew\3\2\2\2" +
					"\u008ex\3\2\2\2\u008ey\3\2\2\2\u008ez\3\2\2\2\u008e{\3\2\2\2\u008e|\3" +
					"\2\2\2\u008e}\3\2\2\2\u008e~\3\2\2\2\u008e\177\3\2\2\2\u008e\u0080\3\2" +
					"\2\2\u008e\u0081\3\2\2\2\u008e\u0082\3\2\2\2\u008e\u0083\3\2\2\2\u008e" +
					"\u0084\3\2\2\2\u008e\u0085\3\2\2\2\u008e\u0086\3\2\2\2\u008e\u0087\3\2" +
					"\2\2\u008e\u0088\3\2\2\2\u008e\u0089\3\2\2\2\u008e\u008a\3\2\2\2\u008e" +
					"\u008b\3\2\2\2\u008e\u008c\3\2\2\2\u008e\u008d\3\2\2\2\u008f\17\3\2\2" +
					"\2\u0090\u0092\7\u00ab\2\2\u0091\u0090\3\2\2\2\u0091\u0092\3\2\2\2\u0092" +
					"\u0094\3\2\2\2\u0093\u0095\7\u00b0\2\2\u0094\u0093\3\2\2\2\u0094\u0095" +
					"\3\2\2\2\u0095\u0097\3\2\2\2\u0096\u0098\7\u00ae\2\2\u0097\u0096\3\2\2" +
					"\2\u0097\u0098\3\2\2\2\u0098\u009a\3\2\2\2\u0099\u009b\7\u00a8\2\2\u009a" +
					"\u0099\3\2\2\2\u009a\u009b\3\2\2\2\u009b\u009f\3\2\2\2\u009c\u009e\5\36" +
					"\20\2\u009d\u009c\3\2\2\2\u009e\u00a1\3\2\2\2\u009f\u009d\3\2\2\2\u009f" +
					"\u00a0\3\2\2\2\u00a0\u00a2\3\2\2\2\u00a1\u009f\3\2\2\2\u00a2\u00a3\5$" +
					"\23\2\u00a3\u00a4\7\u00ba\2\2\u00a4\u00a6\7\7\2\2\u00a5\u00a7\5\34\17" +
					"\2\u00a6\u00a5\3\2\2\2\u00a6\u00a7\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8\u00aa" +
					"\7\b\2\2\u00a9\u00ab\7\u00a7\2\2\u00aa\u00a9\3\2\2\2\u00aa\u00ab\3\2\2" +
					"\2\u00ab\u00af\3\2\2\2\u00ac\u00ae\5\16\b\2\u00ad\u00ac\3\2\2\2\u00ae" +
					"\u00b1\3\2\2\2\u00af\u00ad\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00b3\3\2" +
					"\2\2\u00b1\u00af\3\2\2\2\u00b2\u00b4\5 \21\2\u00b3\u00b2\3\2\2\2\u00b3" +
					"\u00b4\3\2\2\2\u00b4\u00b6\3\2\2\2\u00b5\u00b7\5\n\6\2\u00b6\u00b5\3\2" +
					"\2\2\u00b6\u00b7\3\2\2\2\u00b7\21\3\2\2\2\u00b8\u00ba\7\13\2\2\u00b9\u00bb" +
					"\5\6\4\2\u00ba\u00b9\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bc" +
					"\u00bd\3\2\2\2\u00bd\u00be\3\2\2\2\u00be\u00bf\7\f\2\2\u00bf\23\3\2\2" +
					"\2\u00c0\u00c1\7\62\2\2\u00c1\u0306\5&\24\2\u00c2\u00c3\7\62\2\2\u00c3" +
					"\u0306\7\63\2\2\u00c4\u00c5\7\64\2\2\u00c5\u0306\5&\24\2\u00c6\u00c7\7" +
					"\64\2\2\u00c7\u00c8\5&\24\2\u00c8\u00c9\7\3\2\2\u00c9\u00ca\5&\24\2\u00ca" +
					"\u00cb\7\3\2\2\u00cb\u00cc\5&\24\2\u00cc\u0306\3\2\2\2\u00cd\u00ce\7\65" +
					"\2\2\u00ce\u00cf\5&\24\2\u00cf\u00d0\7\3\2\2\u00d0\u00d1\5&\24\2\u00d1" +
					"\u00d8\7\66\2\2\u00d2\u00d3\5&\24\2\u00d3\u00d4\7\3\2\2\u00d4\u00d5\5" +
					"&\24\2\u00d5\u00d7\3\2\2\2\u00d6\u00d2\3\2\2\2\u00d7\u00da\3\2\2\2\u00d8" +
					"\u00d6\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00db\3\2\2\2\u00da\u00d8\3\2" +
					"\2\2\u00db\u00dc\7\67\2\2\u00dc\u0306\3\2\2\2\u00dd\u00de\78\2\2\u00de" +
					"\u00df\5&\24\2\u00df\u00e0\7\3\2\2\u00e0\u00e1\7\66\2\2\u00e1\u00e6\5" +
					"&\24\2\u00e2\u00e3\7\3\2\2\u00e3\u00e5\5&\24\2\u00e4\u00e2\3\2\2\2\u00e5" +
					"\u00e8\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e9\3\2" +
					"\2\2\u00e8\u00e6\3\2\2\2\u00e9\u00ea\7\67\2\2\u00ea\u0306\3\2\2\2\u00eb" +
					"\u00ed\79\2\2\u00ec\u00ee\7\u00a8\2\2\u00ed\u00ec\3\2\2\2\u00ed\u00ee" +
					"\3\2\2\2\u00ee\u00f2\3\2\2\2\u00ef\u00f1\5\36\20\2\u00f0\u00ef\3\2\2\2" +
					"\u00f1\u00f4\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00f5" +
					"\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f5\u00f6\5$\23\2\u00f6\u00f7\7\u00ba\2" +
					"\2\u00f7\u00f9\7\7\2\2\u00f8\u00fa\5\4\3\2\u00f9\u00f8\3\2\2\2\u00f9\u00fa" +
					"\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00ff\7\b\2\2\u00fc\u00fe\5\16\b\2" +
					"\u00fd\u00fc\3\2\2\2\u00fe\u0101\3\2\2\2\u00ff\u00fd\3\2\2\2\u00ff\u0100" +
					"\3\2\2\2\u0100\u010d\3\2\2\2\u0101\u00ff\3\2\2\2\u0102\u0103\7\66\2\2" +
					"\u0103\u0108\5\26\f\2\u0104\u0105\7\3\2\2\u0105\u0107\5\26\f\2\u0106\u0104" +
					"\3\2\2\2\u0107\u010a\3\2\2\2\u0108\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109" +
					"\u010b\3\2\2\2\u010a\u0108\3\2\2\2\u010b\u010c\7\67\2\2\u010c\u010e\3" +
					"\2\2\2\u010d\u0102\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u010f\3\2\2\2\u010f" +
					"\u0110\7:\2\2\u0110\u0111\5&\24\2\u0111\u0112\7;\2\2\u0112\u0113\5&\24" +
					"\2\u0113\u0306\3\2\2\2\u0114\u0115\7<\2\2\u0115\u0306\5&\24\2\u0116\u0117" +
					"\7=\2\2\u0117\u0118\7>\2\2\u0118\u0119\5(\25\2\u0119\u011a\7;\2\2\u011a" +
					"\u011b\7:\2\2\u011b\u011c\7?\2\2\u011c\u0306\3\2\2\2\u011d\u011e\7=\2" +
					"\2\u011e\u011f\7>\2\2\u011f\u0120\5(\25\2\u0120\u0121\7;\2\2\u0121\u0122" +
					"\5&\24\2\u0122\u0306\3\2\2\2\u0123\u0124\7@\2\2\u0124\u0125\7>\2\2\u0125" +
					"\u0126\5(\25\2\u0126\u0127\7:\2\2\u0127\u0128\5&\24\2\u0128\u0306\3\2" +
					"\2\2\u0129\u012a\7A\2\2\u012a\u012b\7B\2\2\u012b\u012c\5(\25\2\u012c\u012d" +
					"\7\66\2\2\u012d\u0132\5&\24\2\u012e\u012f\7\3\2\2\u012f\u0131\5&\24\2" +
					"\u0130\u012e\3\2\2\2\u0131\u0134\3\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133" +
					"\3\2\2\2\u0133\u0135\3\2\2\2\u0134\u0132\3\2\2\2\u0135\u0136\7\67\2\2" +
					"\u0136\u0137\7;\2\2\u0137\u0138\7:\2\2\u0138\u0139\7?\2\2\u0139\u0306" +
					"\3\2\2\2\u013a\u013b\7A\2\2\u013b\u013c\7B\2\2\u013c\u013d\5(\25\2\u013d" +
					"\u013e\7\66\2\2\u013e\u0143\5&\24\2\u013f\u0140\7\3\2\2\u0140\u0142\5" +
					"&\24\2\u0141\u013f\3\2\2\2\u0142\u0145\3\2\2\2\u0143\u0141\3\2\2\2\u0143" +
					"\u0144\3\2\2\2\u0144\u0146\3\2\2\2\u0145\u0143\3\2\2\2\u0146\u0147\7\67" +
					"\2\2\u0147\u0148\7;\2\2\u0148\u0149\5&\24\2\u0149\u0306\3\2\2\2\u014a" +
					"\u014b\7C\2\2\u014b\u014c\7B\2\2\u014c\u014d\5(\25\2\u014d\u0156\7\66" +
					"\2\2\u014e\u0153\5&\24\2\u014f\u0150\7\3\2\2\u0150\u0152\5&\24\2\u0151" +
					"\u014f\3\2\2\2\u0152\u0155\3\2\2\2\u0153\u0151\3\2\2\2\u0153\u0154\3\2" +
					"\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3\2\2\2\u0156\u014e\3\2\2\2\u0156" +
					"\u0157\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u0159\7\67\2\2\u0159\u0306\3" +
					"\2\2\2\u015a\u015b\7D\2\2\u015b\u015c\7B\2\2\u015c\u015d\5(\25\2\u015d" +
					"\u0166\7\66\2\2\u015e\u0163\5&\24\2\u015f\u0160\7\3\2\2\u0160\u0162\5" +
					"&\24\2\u0161\u015f\3\2\2\2\u0162\u0165\3\2\2\2\u0163\u0161\3\2\2\2\u0163" +
					"\u0164\3\2\2\2\u0164\u0167\3\2\2\2\u0165\u0163\3\2\2\2\u0166\u015e\3\2" +
					"\2\2\u0166\u0167\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u0169\7\67\2\2\u0169" +
					"\u0306\3\2\2\2\u016a\u016c\7E\2\2\u016b\u016d\7F\2\2\u016c\u016b\3\2\2" +
					"\2\u016c\u016d\3\2\2\2\u016d\u016f\3\2\2\2\u016e\u0170\7G\2\2\u016f\u016e" +
					"\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0172\5$\23\2\u0172" +
					"\u0173\5(\25\2\u0173\u0174\7\3\2\2\u0174\u0175\5(\25\2\u0175\u0306\3\2" +
					"\2\2\u0176\u0178\7H\2\2\u0177\u0179\7F\2\2\u0178\u0177\3\2\2\2\u0178\u0179" +
					"\3\2\2\2\u0179\u017b\3\2\2\2\u017a\u017c\7G\2\2\u017b\u017a\3\2\2\2\u017b" +
					"\u017c\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u017e\5$\23\2\u017e\u017f\5(" +
					"\25\2\u017f\u0180\7\3\2\2\u0180\u0181\5(\25\2\u0181\u0306\3\2\2\2\u0182" +
					"\u0184\7I\2\2\u0183\u0185\7F\2\2\u0184\u0183\3\2\2\2\u0184\u0185\3\2\2" +
					"\2\u0185\u0187\3\2\2\2\u0186\u0188\7G\2\2\u0187\u0186\3\2\2\2\u0187\u0188" +
					"\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018a\5$\23\2\u018a\u018b\5(\25\2\u018b" +
					"\u018c\7\3\2\2\u018c\u018d\5(\25\2\u018d\u0306\3\2\2\2\u018e\u0190\7J" +
					"\2\2\u018f\u0191\7F\2\2\u0190\u018f\3\2\2\2\u0190\u0191\3\2\2\2\u0191" +
					"\u0193\3\2\2\2\u0192\u0194\7G\2\2\u0193\u0192\3\2\2\2\u0193\u0194\3\2" +
					"\2\2\u0194\u0195\3\2\2\2\u0195\u0196\5$\23\2\u0196\u0197\5(\25\2\u0197" +
					"\u0198\7\3\2\2\u0198\u0199\5(\25\2\u0199\u0306\3\2\2\2\u019a\u019e\7K" +
					"\2\2\u019b\u019d\7\u00b9\2\2\u019c\u019b\3\2\2\2\u019d\u01a0\3\2\2\2\u019e" +
					"\u019c\3\2\2\2\u019e\u019f\3\2\2\2\u019f\u01a1\3\2\2\2\u01a0\u019e\3\2" +
					"\2\2\u01a1\u01a2\5$\23\2\u01a2\u01a3\5(\25\2\u01a3\u01a4\7\3\2\2\u01a4" +
					"\u01a5\5(\25\2\u01a5\u0306\3\2\2\2\u01a6\u01aa\7L\2\2\u01a7\u01a9\7\u00b9" +
					"\2\2\u01a8\u01a7\3\2\2\2\u01a9\u01ac\3\2\2\2\u01aa\u01a8\3\2\2\2\u01aa" +
					"\u01ab\3\2\2\2\u01ab\u01ad\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ad\u01ae\5$" +
					"\23\2\u01ae\u01af\5(\25\2\u01af\u01b0\7\3\2\2\u01b0\u01b1\5(\25\2\u01b1" +
					"\u0306\3\2\2\2\u01b2\u01b6\7M\2\2\u01b3\u01b5\7\u00b9\2\2\u01b4\u01b3" +
					"\3\2\2\2\u01b5\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7" +
					"\u01b9\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b9\u01ba\5$\23\2\u01ba\u01bb\5(" +
					"\25\2\u01bb\u01bc\7\3\2\2\u01bc\u01bd\5(\25\2\u01bd\u0306\3\2\2\2\u01be" +
					"\u01c2\7N\2\2\u01bf\u01c1\7\u00b9\2\2\u01c0\u01bf\3\2\2\2\u01c1\u01c4" +
					"\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c5\3\2\2\2\u01c4" +
					"\u01c2\3\2\2\2\u01c5\u01c6\5$\23\2\u01c6\u01c7\5(\25\2\u01c7\u01c8\7\3" +
					"\2\2\u01c8\u01c9\5(\25\2\u01c9\u0306\3\2\2\2\u01ca\u01ce\7O\2\2\u01cb" +
					"\u01cd\7\u00b9\2\2\u01cc\u01cb\3\2\2\2\u01cd\u01d0\3\2\2\2\u01ce\u01cc" +
					"\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01d1\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d1" +
					"\u01d2\5$\23\2\u01d2\u01d3\5(\25\2\u01d3\u01d4\7\3\2\2\u01d4\u01d5\5(" +
					"\25\2\u01d5\u0306\3\2\2\2\u01d6\u01d8\7P\2\2\u01d7\u01d9\7Q\2\2\u01d8" +
					"\u01d7\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01db\5$" +
					"\23\2\u01db\u01dc\5(\25\2\u01dc\u01dd\7\3\2\2\u01dd\u01de\5(\25\2\u01de" +
					"\u0306\3\2\2\2\u01df\u01e1\7R\2\2\u01e0\u01e2\7Q\2\2\u01e1\u01e0\3\2\2" +
					"\2\u01e1\u01e2\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e4\5$\23\2\u01e4\u01e5" +
					"\5(\25\2\u01e5\u01e6\7\3\2\2\u01e6\u01e7\5(\25\2\u01e7\u0306\3\2\2\2\u01e8" +
					"\u01ea\7S\2\2\u01e9\u01eb\7Q\2\2\u01ea\u01e9\3\2\2\2\u01ea\u01eb\3\2\2" +
					"\2\u01eb\u01ec\3\2\2\2\u01ec\u01ed\5$\23\2\u01ed\u01ee\5(\25\2\u01ee\u01ef" +
					"\7\3\2\2\u01ef\u01f0\5(\25\2\u01f0\u0306\3\2\2\2\u01f1\u01f3\7T\2\2\u01f2" +
					"\u01f4\7Q\2\2\u01f3\u01f2\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u01f5\3\2" +
					"\2\2\u01f5\u01f6\5$\23\2\u01f6\u01f7\5(\25\2\u01f7\u01f8\7\3\2\2\u01f8" +
					"\u01f9\5(\25\2\u01f9\u0306\3\2\2\2\u01fa\u01fb\7U\2\2\u01fb\u01fc\5$\23" +
					"\2\u01fc\u01fd\5(\25\2\u01fd\u01fe\7\3\2\2\u01fe\u01ff\5(\25\2\u01ff\u0306" +
					"\3\2\2\2\u0200\u0201\7V\2\2\u0201\u0202\5$\23\2\u0202\u0203\5(\25\2\u0203" +
					"\u0204\7\3\2\2\u0204\u0205\5(\25\2\u0205\u0306\3\2\2\2\u0206\u0207\7W" +
					"\2\2\u0207\u0208\5$\23\2\u0208\u0209\5(\25\2\u0209\u020a\7\3\2\2\u020a" +
					"\u020b\5(\25\2\u020b\u0306\3\2\2\2\u020c\u020d\7X\2\2\u020d\u020e\5$\23" +
					"\2\u020e\u020f\5(\25\2\u020f\u0210\7\3\2\2\u0210\u0211\5(\25\2\u0211\u0306" +
					"\3\2\2\2\u0212\u0213\7Y\2\2\u0213\u0214\5$\23\2\u0214\u0215\5(\25\2\u0215" +
					"\u0216\7\3\2\2\u0216\u0217\5(\25\2\u0217\u0306\3\2\2\2\u0218\u0219\7Z" +
					"\2\2\u0219\u021a\7\u00b4\2\2\u021a\u021b\5$\23\2\u021b\u021c\5(\25\2\u021c" +
					"\u021d\7\3\2\2\u021d\u021e\5(\25\2\u021e\u0306\3\2\2\2\u021f\u0223\7[" +
					"\2\2\u0220\u0222\7\u00b9\2\2\u0221\u0220\3\2\2\2\u0222\u0225\3\2\2\2\u0223" +
					"\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0226\3\2\2\2\u0225\u0223\3\2" +
					"\2\2\u0226\u0227\7\u00b3\2\2\u0227\u0228\5$\23\2\u0228\u0229\5(\25\2\u0229" +
					"\u022a\7\3\2\2\u022a\u022b\5(\25\2\u022b\u0306\3\2\2\2\u022c\u022d\7\\" +
					"\2\2\u022d\u022e\5&\24\2\u022e\u022f\7:\2\2\u022f\u0230\5$\23\2\u0230" +
					"\u0306\3\2\2\2\u0231\u0232\7]\2\2\u0232\u0233\5&\24\2\u0233\u0234\7:\2" +
					"\2\u0234\u0235\5$\23\2\u0235\u0306\3\2\2\2\u0236\u0237\7^\2\2\u0237\u0238" +
					"\5&\24\2\u0238\u0239\7:\2\2\u0239\u023a\5$\23\2\u023a\u0306\3\2\2\2\u023b" +
					"\u023c\7^\2\2\u023c\u023d\5&\24\2\u023d\u023e\7:\2\2\u023e\u023f\5$\23" +
					"\2\u023f\u0306\3\2\2\2\u0240\u0241\7_\2\2\u0241\u0242\5&\24\2\u0242\u0243" +
					"\7:\2\2\u0243\u0244\5$\23\2\u0244\u0306\3\2\2\2\u0245\u0246\7`\2\2\u0246" +
					"\u0247\5&\24\2\u0247\u0248\7:\2\2\u0248\u0249\5$\23\2\u0249\u0306\3\2" +
					"\2\2\u024a\u024b\7a\2\2\u024b\u024c\5&\24\2\u024c\u024d\7:\2\2\u024d\u024e" +
					"\5$\23\2\u024e\u0306\3\2\2\2\u024f\u0250\7b\2\2\u0250\u0251\5&\24\2\u0251" +
					"\u0252\7:\2\2\u0252\u0253\5$\23\2\u0253\u0306\3\2\2\2\u0254\u0255\7c\2" +
					"\2\u0255\u0256\5&\24\2\u0256\u0257\7:\2\2\u0257\u0258\5$\23\2\u0258\u0306" +
					"\3\2\2\2\u0259\u025a\7d\2\2\u025a\u025b\5&\24\2\u025b\u025c\7:\2\2\u025c" +
					"\u025d\5$\23\2\u025d\u0306\3\2\2\2\u025e\u025f\7e\2\2\u025f\u0260\5&\24" +
					"\2\u0260\u0261\7:\2\2\u0261\u0262\5$\23\2\u0262\u0306\3\2\2\2\u0263\u0264" +
					"\7f\2\2\u0264\u0265\5&\24\2\u0265\u0266\7:\2\2\u0266\u0267\5$\23\2\u0267" +
					"\u0306\3\2\2\2\u0268\u0269\7g\2\2\u0269\u026a\5&\24\2\u026a\u026b\7:\2" +
					"\2\u026b\u026c\5$\23\2\u026c\u0306\3\2\2\2\u026d\u026e\7h\2\2\u026e\u026f" +
					"\5&\24\2\u026f\u0270\7:\2\2\u0270\u0271\5$\23\2\u0271\u0306\3\2\2\2\u0272" +
					"\u0273\7i\2\2\u0273\u0274\5&\24\2\u0274\u0275\7\3\2\2\u0275\u0276\5&\24" +
					"\2\u0276\u0277\7\3\2\2\u0277\u0278\5&\24\2\u0278\u0306\3\2\2\2\u0279\u027a" +
					"\7j\2\2\u027a\u027b\5&\24\2\u027b\u027c\7\3\2\2\u027c\u027d\5$\23\2\u027d" +
					"\u0306\3\2\2\2\u027e\u027f\7k\2\2\u027f\u0280\5&\24\2\u0280\u0281\7\3" +
					"\2\2\u0281\u0282\5&\24\2\u0282\u0306\3\2\2\2\u0283\u0284\7l\2\2\u0284" +
					"\u0285\5&\24\2\u0285\u0286\7\3\2\2\u0286\u0287\5&\24\2\u0287\u0288\7\3" +
					"\2\2\u0288\u0289\5&\24\2\u0289\u0306\3\2\2\2\u028a\u028b\7m\2\2\u028b" +
					"\u028c\5&\24\2\u028c\u028d\7\3\2\2\u028d\u028e\5&\24\2\u028e\u028f\7\3" +
					"\2\2\u028f\u0290\5&\24\2\u0290\u0306\3\2\2\2\u0291\u0292\7n\2\2\u0292" +
					"\u0293\5$\23\2\u0293\u0294\7\66\2\2\u0294\u0295\5(\25\2\u0295\u0296\7" +
					"\3\2\2\u0296\u0297\5(\25\2\u0297\u02a1\7\67\2\2\u0298\u0299\7\3\2\2\u0299" +
					"\u029a\7\66\2\2\u029a\u029b\5(\25\2\u029b\u029c\7\3\2\2\u029c\u029d\5" +
					"(\25\2\u029d\u029e\7\67\2\2\u029e\u02a0\3\2\2\2\u029f\u0298\3\2\2\2\u02a0" +
					"\u02a3\3\2\2\2\u02a1\u029f\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u0306\3\2" +
					"\2\2\u02a3\u02a1\3\2\2\2\u02a4\u02a5\7o\2\2\u02a5\u02a6\5$\23\2\u02a6" +
					"\u02aa\7p\2\2\u02a7\u02a9\5\b\5\2\u02a8\u02a7\3\2\2\2\u02a9\u02ac\3\2" +
					"\2\2\u02aa\u02a8\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u0306\3\2\2\2\u02ac" +
					"\u02aa\3\2\2\2\u02ad\u02ae\7o\2\2\u02ae\u02b0\5$\23\2\u02af\u02b1\5\b" +
					"\5\2\u02b0\u02af\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b0\3\2\2\2\u02b2" +
					"\u02b3\3\2\2\2\u02b3\u0306\3\2\2\2\u02b4\u02b6\t\2\2\2\u02b5\u02b4\3\2" +
					"\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02bb\7t\2\2\u02b8" +
					"\u02ba\7\u00b9\2\2\u02b9\u02b8\3\2\2\2\u02ba\u02bd\3\2\2\2\u02bb\u02b9" +
					"\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02bf\3\2\2\2\u02bd\u02bb\3\2\2\2\u02be" +
					"\u02c0\7\u00a8\2\2\u02bf\u02be\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c4" +
					"\3\2\2\2\u02c1\u02c3\5\36\20\2\u02c2\u02c1\3\2\2\2\u02c3\u02c6\3\2\2\2" +
					"\u02c4\u02c2\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c7\3\2\2\2\u02c6\u02c4" +
					"\3\2\2\2\u02c7\u02c8\5$\23\2\u02c8\u02c9\5(\25\2\u02c9\u02cb\7\7\2\2\u02ca" +
					"\u02cc\5\4\3\2\u02cb\u02ca\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd\3\2" +
					"\2\2\u02cd\u02d1\7\b\2\2\u02ce\u02d0\5\16\b\2\u02cf\u02ce\3\2\2\2\u02d0" +
					"\u02d3\3\2\2\2\u02d1\u02cf\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d7\3\2" +
					"\2\2\u02d3\u02d1\3\2\2\2\u02d4\u02d6\5\26\f\2\u02d5\u02d4\3\2\2\2\u02d6" +
					"\u02d9\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u0306\3\2" +
					"\2\2\u02d9\u02d7\3\2\2\2\u02da\u02dc\7u\2\2\u02db\u02dd\7v\2\2\u02dc\u02db" +
					"\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02e1\5$\23\2\u02df" +
					"\u02e0\7\3\2\2\u02e0\u02e2\5&\24\2\u02e1\u02df\3\2\2\2\u02e1\u02e2\3\2" +
					"\2\2\u02e2\u02e6\3\2\2\2\u02e3\u02e4\7\3\2\2\u02e4\u02e5\7\17\2\2\u02e5" +
					"\u02e7\7\u00b8\2\2\u02e6\u02e3\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u0306" +
					"\3\2\2\2\u02e8\u02ea\7w\2\2\u02e9\u02eb\7x\2\2\u02ea\u02e9\3\2\2\2\u02ea" +
					"\u02eb\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ed\5$\23\2\u02ed\u02ee\7\3" +
					"\2\2\u02ee\u02f2\5&\24\2\u02ef\u02f0\7\3\2\2\u02f0\u02f1\7\17\2\2\u02f1" +
					"\u02f3\7\u00b8\2\2\u02f2\u02ef\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u0306" +
					"\3\2\2\2\u02f4\u02f5\7w\2\2\u02f5\u02f7\7y\2\2\u02f6\u02f8\7x\2\2\u02f7" +
					"\u02f6\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fa\5$" +
					"\23\2\u02fa\u02fb\7\3\2\2\u02fb\u02fd\5&\24\2\u02fc\u02fe\7z\2\2\u02fd" +
					"\u02fc\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0303\7\u00a5" +
					"\2\2\u0300\u0301\7\3\2\2\u0301\u0302\7\17\2\2\u0302\u0304\7\u00b8\2\2" +
					"\u0303\u0300\3\2\2\2\u0303\u0304\3\2\2\2\u0304\u0306\3\2\2\2\u0305\u00c0" +
					"\3\2\2\2\u0305\u00c2\3\2\2\2\u0305\u00c4\3\2\2\2\u0305\u00c6\3\2\2\2\u0305" +
					"\u00cd\3\2\2\2\u0305\u00dd\3\2\2\2\u0305\u00eb\3\2\2\2\u0305\u0114\3\2" +
					"\2\2\u0305\u0116\3\2\2\2\u0305\u011d\3\2\2\2\u0305\u0123\3\2\2\2\u0305" +
					"\u0129\3\2\2\2\u0305\u013a\3\2\2\2\u0305\u014a\3\2\2\2\u0305\u015a\3\2" +
					"\2\2\u0305\u016a\3\2\2\2\u0305\u0176\3\2\2\2\u0305\u0182\3\2\2\2\u0305" +
					"\u018e\3\2\2\2\u0305\u019a\3\2\2\2\u0305\u01a6\3\2\2\2\u0305\u01b2\3\2" +
					"\2\2\u0305\u01be\3\2\2\2\u0305\u01ca\3\2\2\2\u0305\u01d6\3\2\2\2\u0305" +
					"\u01df\3\2\2\2\u0305\u01e8\3\2\2\2\u0305\u01f1\3\2\2\2\u0305\u01fa\3\2" +
					"\2\2\u0305\u0200\3\2\2\2\u0305\u0206\3\2\2\2\u0305\u020c\3\2\2\2\u0305" +
					"\u0212\3\2\2\2\u0305\u0218\3\2\2\2\u0305\u021f\3\2\2\2\u0305\u022c\3\2" +
					"\2\2\u0305\u0231\3\2\2\2\u0305\u0236\3\2\2\2\u0305\u023b\3\2\2\2\u0305" +
					"\u0240\3\2\2\2\u0305\u0245\3\2\2\2\u0305\u024a\3\2\2\2\u0305\u024f\3\2" +
					"\2\2\u0305\u0254\3\2\2\2\u0305\u0259\3\2\2\2\u0305\u025e\3\2\2\2\u0305" +
					"\u0263\3\2\2\2\u0305\u0268\3\2\2\2\u0305\u026d\3\2\2\2\u0305\u0272\3\2" +
					"\2\2\u0305\u0279\3\2\2\2\u0305\u027e\3\2\2\2\u0305\u0283\3\2\2\2\u0305" +
					"\u028a\3\2\2\2\u0305\u0291\3\2\2\2\u0305\u02a4\3\2\2\2\u0305\u02ad\3\2" +
					"\2\2\u0305\u02b5\3\2\2\2\u0305\u02da\3\2\2\2\u0305\u02e8\3\2\2\2\u0305" +
					"\u02f4\3\2\2\2\u0306\25\3\2\2\2\u0307\u0308\7\u00b1\2\2\u0308\u0309\7" +
					"\7\2\2\u0309\u030e\5&\24\2\u030a\u030b\7\3\2\2\u030b\u030d\5&\24\2\u030c" +
					"\u030a\3\2\2\2\u030d\u0310\3\2\2\2\u030e\u030c\3\2\2\2\u030e\u030f\3\2" +
					"\2\2\u030f\u0311\3\2\2\2\u0310\u030e\3\2\2\2\u0311\u0312\7\b\2\2\u0312" +
					"\27\3\2\2\2\u0313\u0317\5$\23\2\u0314\u0316\5\32\16\2\u0315\u0314\3\2" +
					"\2\2\u0316\u0319\3\2\2\2\u0317\u0315\3\2\2\2\u0317\u0318\3\2\2\2\u0318" +
					"\u031b\3\2\2\2\u0319\u0317\3\2\2\2\u031a\u031c\7\u00ac\2\2\u031b\u031a" +
					"\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u031f\3\2\2\2\u031d\u031f\7{\2\2\u031e" +
					"\u0313\3\2\2\2\u031e\u031d\3\2\2\2\u031f\31\3\2\2\2\u0320\u0321\7\17\2" +
					"\2\u0321\u0339\7\u00b8\2\2\u0322\u0339\7|\2\2\u0323\u0324\7}\2\2\u0324" +
					"\u0325\7\7\2\2\u0325\u0326\7\u00b8\2\2\u0326\u0339\7\b\2\2\u0327\u0328" +
					"\7~\2\2\u0328\u0329\7\7\2\2\u0329\u032a\7\u00b8\2\2\u032a\u0339\7\b\2" +
					"\2\u032b\u0339\7v\2\2\u032c\u0339\7\177\2\2\u032d\u0339\7\u0080\2\2\u032e" +
					"\u0339\7\u0081\2\2\u032f\u0339\7\u0082\2\2\u0330\u0339\7\u0083\2\2\u0331" +
					"\u0339\7%\2\2\u0332\u0339\7&\2\2\u0333\u0339\7\u0084\2\2\u0334\u0339\7" +
					"\u0085\2\2\u0335\u0339\7\u0086\2\2\u0336\u0339\7\u0087\2\2\u0337\u0339" +
					"\7\u00b1\2\2\u0338\u0320\3\2\2\2\u0338\u0322\3\2\2\2\u0338\u0323\3\2\2" +
					"\2\u0338\u0327\3\2\2\2\u0338\u032b\3\2\2\2\u0338\u032c\3\2\2\2\u0338\u032d" +
					"\3\2\2\2\u0338\u032e\3\2\2\2\u0338\u032f\3\2\2\2\u0338\u0330\3\2\2\2\u0338" +
					"\u0331\3\2\2\2\u0338\u0332\3\2\2\2\u0338\u0333\3\2\2\2\u0338\u0334\3\2" +
					"\2\2\u0338\u0335\3\2\2\2\u0338\u0336\3\2\2\2\u0338\u0337\3\2\2\2\u0339" +
					"\33\3\2\2\2\u033a\u033f\5\30\r\2\u033b\u033c\7\3\2\2\u033c\u033e\5\30" +
					"\r\2\u033d\u033b\3\2\2\2\u033e\u0341\3\2\2\2\u033f\u033d\3\2\2\2\u033f" +
					"\u0340\3\2\2\2\u0340\35\3\2\2\2\u0341\u033f\3\2\2\2\u0342\u0353\7\u00b1" +
					"\2\2\u0343\u0344\7~\2\2\u0344\u0345\7\7\2\2\u0345\u0346\7\u00b8\2\2\u0346" +
					"\u0353\7\b\2\2\u0347\u0348\7}\2\2\u0348\u0349\7\7\2\2\u0349\u034a\7\u00b8" +
					"\2\2\u034a\u0353\7\b\2\2\u034b\u034c\7\17\2\2\u034c\u0353\7\u00b8\2\2" +
					"\u034d\u0353\7\177\2\2\u034e\u0353\7\u0081\2\2\u034f\u0353\7\u0083\2\2" +
					"\u0350\u0353\7\u0085\2\2\u0351\u0353\7\u0087\2\2\u0352\u0342\3\2\2\2\u0352" +
					"\u0343\3\2\2\2\u0352\u0347\3\2\2\2\u0352\u034b\3\2\2\2\u0352\u034d\3\2" +
					"\2\2\u0352\u034e\3\2\2\2\u0352\u034f\3\2\2\2\u0352\u0350\3\2\2\2\u0352" +
					"\u0351\3\2\2\2\u0353\37\3\2\2\2\u0354\u0355\7\3\2\2\u0355\u0356\7\u0088" +
					"\2\2\u0356\u0357\7\u00b1\2\2\u0357!\3\2\2\2\u0358\u0359\7\u00ac\2\2\u0359" +
					"\u035b\7\16\2\2\u035a\u0358\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035c\3" +
					"\2\2\2\u035c\u035d\5\24\13\2\u035d#\3\2\2\2\u035e\u035f\b\23\1\2\u035f" +
					"\u0392\7\u00a9\2\2\u0360\u0392\7\u0089\2\2\u0361\u0392\7\u008a\2\2\u0362" +
					"\u0392\7\u008b\2\2\u0363\u0392\7\u008c\2\2\u0364\u0392\7\u008d\2\2\u0365" +
					"\u0392\7\u008e\2\2\u0366\u0392\7\u008f\2\2\u0367\u0368\7\u0091\2\2\u0368" +
					"\u0369\7\u00b8\2\2\u0369\u036a\7\u0092\2\2\u036a\u036b\5$\23\2\u036b\u036c" +
					"\7\u0093\2\2\u036c\u0392\3\2\2\2\u036d\u0392\7\u0094\2\2\u036e\u0392\7" +
					"\u0095\2\2\u036f\u0392\7\u0096\2\2\u0370\u0371\7\66\2\2\u0371\u0372\7" +
					"\u00b8\2\2\u0372\u0373\7\u0092\2\2\u0373\u0374\5$\23\2\u0374\u0375\7\67" +
					"\2\2\u0375\u0392\3\2\2\2\u0376\u0377\7\13\2\2\u0377\u037c\5$\23\2\u0378" +
					"\u0379\7\3\2\2\u0379\u037b\5$\23\2\u037a\u0378\3\2\2\2\u037b\u037e\3\2" +
					"\2\2\u037c\u037a\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u037f\3\2\2\2\u037e" +
					"\u037c\3\2\2\2\u037f\u0380\7\f\2\2\u0380\u0392\3\2\2\2\u0381\u0382\7\u0091" +
					"\2\2\u0382\u0383\7\13\2\2\u0383\u0388\5$\23\2\u0384\u0385\7\3\2\2\u0385" +
					"\u0387\5$\23\2\u0386\u0384\3\2\2\2\u0387\u038a\3\2\2\2\u0388\u0386\3\2" +
					"\2\2\u0388\u0389\3\2\2\2\u0389\u038b\3\2\2\2\u038a\u0388\3\2\2\2\u038b" +
					"\u038c\7\f\2\2\u038c\u038d\7\u0093\2\2\u038d\u0392\3\2\2\2\u038e\u0392" +
					"\7\u0097\2\2\u038f\u0392\7\63\2\2\u0390\u0392\7\u00ac\2\2\u0391\u035e" +
					"\3\2\2\2\u0391\u0360\3\2\2\2\u0391\u0361\3\2\2\2\u0391\u0362\3\2\2\2\u0391" +
					"\u0363\3\2\2\2\u0391\u0364\3\2\2\2\u0391\u0365\3\2\2\2\u0391\u0366\3\2" +
					"\2\2\u0391\u0367\3\2\2\2\u0391\u036d\3\2\2\2\u0391\u036e\3\2\2\2\u0391" +
					"\u036f\3\2\2\2\u0391\u0370\3\2\2\2\u0391\u0376\3\2\2\2\u0391\u0381\3\2" +
					"\2\2\u0391\u038e\3\2\2\2\u0391\u038f\3\2\2\2\u0391\u0390\3\2\2\2\u0392" +
					"\u03a7\3\2\2\2\u0393\u0394\f\16\2\2\u0394\u03a6\7\u0090\2\2\u0395\u0396" +
					"\f\4\2\2\u0396\u039f\7\7\2\2\u0397\u039c\5$\23\2\u0398\u0399\7\3\2\2\u0399" +
					"\u039b\5$\23\2\u039a\u0398\3\2\2\2\u039b\u039e\3\2\2\2\u039c\u039a\3\2" +
					"\2\2\u039c\u039d\3\2\2\2\u039d\u03a0\3\2\2\2\u039e\u039c\3\2\2\2\u039f" +
					"\u0397\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a2\3\2\2\2\u03a1\u03a3\7{" +
					"\2\2\u03a2\u03a1\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4" +
					"\u03a6\7\b\2\2\u03a5\u0393\3\2\2\2\u03a5\u0395\3\2\2\2\u03a6\u03a9\3\2" +
					"\2\2\u03a7\u03a5\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8%\3\2\2\2\u03a9\u03a7" +
					"\3\2\2\2\u03aa\u03ab\5$\23\2\u03ab\u03ac\5(\25\2\u03ac\'\3\2\2\2\u03ad" +
					"\u04e7\7\u00ba\2\2\u03ae\u04e7\7\u00ac\2\2\u03af\u04e7\7\u00b7\2\2\u03b0" +
					"\u04e7\7\u00b8\2\2\u03b1\u04e7\7\u00b5\2\2\u03b2\u04e7\7\u0098\2\2\u03b3" +
					"\u04e7\7\u0099\2\2\u03b4\u04e7\7\u009a\2\2\u03b5\u04e7\7\u009b\2\2\u03b6" +
					"\u04e7\7\u009c\2\2\u03b7\u04e7\7\u009d\2\2\u03b8\u03b9\7\13\2\2\u03b9" +
					"\u03be\5&\24\2\u03ba\u03bb\7\3\2\2\u03bb\u03bd\5&\24\2\u03bc\u03ba\3\2" +
					"\2\2\u03bd\u03c0\3\2\2\2\u03be\u03bc\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf" +
					"\u03c1\3\2\2\2\u03c0\u03be\3\2\2\2\u03c1\u03c2\7\f\2\2\u03c2\u04e7\3\2" +
					"\2\2\u03c3\u03c4\7\u0091\2\2\u03c4\u03c9\5&\24\2\u03c5\u03c6\7\3\2\2\u03c6" +
					"\u03c8\5&\24\2\u03c7\u03c5\3\2\2\2\u03c8\u03cb\3\2\2\2\u03c9\u03c7\3\2" +
					"\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03cc\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cc" +
					"\u03cd\7\u0093\2\2\u03cd\u04e7\3\2\2\2\u03ce\u03cf\7\66\2\2\u03cf\u03d4" +
					"\5&\24\2\u03d0\u03d1\7\3\2\2\u03d1\u03d3\5&\24\2\u03d2\u03d0\3\2\2\2\u03d3" +
					"\u03d6\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d7\3\2" +
					"\2\2\u03d6\u03d4\3\2\2\2\u03d7\u03d8\7\67\2\2\u03d8\u04e7\3\2\2\2\u03d9" +
					"\u03db\7\u009e\2\2\u03da\u03dc\7\u009f\2\2\u03db\u03da\3\2\2\2\u03db\u03dc" +
					"\3\2\2\2\u03dc\u03de\3\2\2\2\u03dd\u03df\7\r\2\2\u03de\u03dd\3\2\2\2\u03de" +
					"\u03df\3\2\2\2\u03df\u03e1\3\2\2\2\u03e0\u03e2\7\u00a0\2\2\u03e1\u03e0" +
					"\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e4\7\u00b1\2" +
					"\2\u03e4\u03e5\7\3\2\2\u03e5\u04e7\7\u00b1\2\2\u03e6\u03e7\7\u00a1\2\2" +
					"\u03e7\u03e8\7\7\2\2\u03e8\u03e9\7\u00ba\2\2\u03e9\u03ea\7\3\2\2\u03ea" +
					"\u03eb\7\u00ac\2\2\u03eb\u04e7\7\b\2\2\u03ec\u03ed\7\\\2\2\u03ed\u03ee" +
					"\7\7\2\2\u03ee\u03ef\5&\24\2\u03ef\u03f0\7:\2\2\u03f0\u03f1\5$\23\2\u03f1" +
					"\u03f2\7\b\2\2\u03f2\u04e7\3\2\2\2\u03f3\u03f4\7]\2\2\u03f4\u03f5\7\7" +
					"\2\2\u03f5\u03f6\5&\24\2\u03f6\u03f7\7:\2\2\u03f7\u03f8\5$\23\2\u03f8" +
					"\u03f9\7\b\2\2\u03f9\u04e7\3\2\2\2\u03fa\u03fb\7^\2\2\u03fb\u03fc\7\7" +
					"\2\2\u03fc\u03fd\5&\24\2\u03fd\u03fe\7:\2\2\u03fe\u03ff\5$\23\2\u03ff" +
					"\u0400\7\b\2\2\u0400\u04e7\3\2\2\2\u0401\u0402\7_\2\2\u0402\u0403\7\7" +
					"\2\2\u0403\u0404\5&\24\2\u0404\u0405\7:\2\2\u0405\u0406\5$\23\2\u0406" +
					"\u0407\7\b\2\2\u0407\u04e7\3\2\2\2\u0408\u0409\7`\2\2\u0409\u040a\7\7" +
					"\2\2\u040a\u040b\5&\24\2\u040b\u040c\7:\2\2\u040c\u040d\5$\23\2\u040d" +
					"\u040e\7\b\2\2\u040e\u04e7\3\2\2\2\u040f\u0410\7a\2\2\u0410\u0411\7\7" +
					"\2\2\u0411\u0412\5&\24\2\u0412\u0413\7:\2\2\u0413\u0414\5$\23\2\u0414" +
					"\u0415\7\b\2\2\u0415\u04e7\3\2\2\2\u0416\u0417\7b\2\2\u0417\u0418\7\7" +
					"\2\2\u0418\u0419\5&\24\2\u0419\u041a\7:\2\2\u041a\u041b\5$\23\2\u041b" +
					"\u041c\7\b\2\2\u041c\u04e7\3\2\2\2\u041d\u041e\7c\2\2\u041e\u041f\7\7" +
					"\2\2\u041f\u0420\5&\24\2\u0420\u0421\7:\2\2\u0421\u0422\5$\23\2\u0422" +
					"\u0423\7\b\2\2\u0423\u04e7\3\2\2\2\u0424\u0425\7d\2\2\u0425\u0426\7\7" +
					"\2\2\u0426\u0427\5&\24\2\u0427\u0428\7:\2\2\u0428\u0429\5$\23\2\u0429" +
					"\u042a\7\b\2\2\u042a\u04e7\3\2\2\2\u042b\u042c\7e\2\2\u042c\u042d\7\7" +
					"\2\2\u042d\u042e\5&\24\2\u042e\u042f\7:\2\2\u042f\u0430\5$\23\2\u0430" +
					"\u0431\7\b\2\2\u0431\u04e7\3\2\2\2\u0432\u0433\7g\2\2\u0433\u0434\7\7" +
					"\2\2\u0434\u0435\5&\24\2\u0435\u0436\7:\2\2\u0436\u0437\5$\23\2\u0437" +
					"\u0438\7\b\2\2\u0438\u04e7\3\2\2\2\u0439\u043a\7h\2\2\u043a\u043b\7\7" +
					"\2\2\u043b\u043c\5&\24\2\u043c\u043d\7:\2\2\u043d\u043e\5$\23\2\u043e" +
					"\u043f\7\b\2\2\u043f\u04e7\3\2\2\2\u0440\u0441\7\u00a2\2\2\u0441\u0442" +
					"\7\7\2\2\u0442\u0445\5&\24\2\u0443\u0444\7\3\2\2\u0444\u0446\5*\26\2\u0445" +
					"\u0443\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u0445\3\2\2\2\u0447\u0448\3\2" +
					"\2\2\u0448\u0449\3\2\2\2\u0449\u044a\7\b\2\2\u044a\u04e7\3\2\2\2\u044b" +
					"\u044c\7\u00a3\2\2\u044c\u044d\7\7\2\2\u044d\u044e\5(\25\2\u044e\u044f" +
					"\7\3\2\2\u044f\u0452\5(\25\2\u0450\u0451\7\3\2\2\u0451\u0453\5*\26\2\u0452" +
					"\u0450\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0452\3\2\2\2\u0454\u0455\3\2" +
					"\2\2\u0455\u0456\3\2\2\2\u0456\u0457\7\b\2\2\u0457\u04e7\3\2\2\2\u0458" +
					"\u0459\7Z\2\2\u0459\u045a\7\u00b3\2\2\u045a\u045b\7\7\2\2\u045b\u045c" +
					"\5&\24\2\u045c\u045d\7\3\2\2\u045d\u045e\5&\24\2\u045e\u045f\7\b\2\2\u045f" +
					"\u04e7\3\2\2\2\u0460\u0461\7[\2\2\u0461\u0462\7\u00b3\2\2\u0462\u0463" +
					"\7\7\2\2\u0463\u0464\5&\24\2\u0464\u0465\7\3\2\2\u0465\u0466\5&\24\2\u0466" +
					"\u0467\7\b\2\2\u0467\u04e7\3\2\2\2\u0468\u0469\7E\2\2\u0469\u046a\7\7" +
					"\2\2\u046a\u046b\5&\24\2\u046b\u046c\7\3\2\2\u046c\u046d\5&\24\2\u046d" +
					"\u046e\7\b\2\2\u046e\u04e7\3\2\2\2\u046f\u0470\7K\2\2\u0470\u0471\7\7" +
					"\2\2\u0471\u0472\5&\24\2\u0472\u0473\7\3\2\2\u0473\u0474\5&\24\2\u0474" +
					"\u0475\7\b\2\2\u0475\u04e7\3\2\2\2\u0476\u0477\7H\2\2\u0477\u0478\7\7" +
					"\2\2\u0478\u0479\5&\24\2\u0479\u047a\7\3\2\2\u047a\u047b\5&\24\2\u047b" +
					"\u047c\7\b\2\2\u047c\u04e7\3\2\2\2\u047d\u047e\7L\2\2\u047e\u047f\7\7" +
					"\2\2\u047f\u0480\5&\24\2\u0480\u0481\7\3\2\2\u0481\u0482\5&\24\2\u0482" +
					"\u0483\7\b\2\2\u0483\u04e7\3\2\2\2\u0484\u0485\7I\2\2\u0485\u0486\7\7" +
					"\2\2\u0486\u0487\5&\24\2\u0487\u0488\7\3\2\2\u0488\u0489\5&\24\2\u0489" +
					"\u048a\7\b\2\2\u048a\u04e7\3\2\2\2\u048b\u048c\7M\2\2\u048c\u048d\7\7" +
					"\2\2\u048d\u048e\5&\24\2\u048e\u048f\7\3\2\2\u048f\u0490\5&\24\2\u0490" +
					"\u0491\7\b\2\2\u0491\u04e7\3\2\2\2\u0492\u0493\7R\2\2\u0493\u0494\7\7" +
					"\2\2\u0494\u0495\5&\24\2\u0495\u0496\7\3\2\2\u0496\u0497\5&\24\2\u0497" +
					"\u0498\7\b\2\2\u0498\u04e7\3\2\2\2\u0499\u049a\7P\2\2\u049a\u049b\7\7" +
					"\2\2\u049b\u049c\5&\24\2\u049c\u049d\7\3\2\2\u049d\u049e\5&\24\2\u049e" +
					"\u049f\7\b\2\2\u049f\u04e7\3\2\2\2\u04a0\u04a1\7N\2\2\u04a1\u04a2\7\7" +
					"\2\2\u04a2\u04a3\5&\24\2\u04a3\u04a4\7\3\2\2\u04a4\u04a5\5&\24\2\u04a5" +
					"\u04a6\7\b\2\2\u04a6\u04e7\3\2\2\2\u04a7\u04a8\7U\2\2\u04a8\u04a9\7\7" +
					"\2\2\u04a9\u04aa\5&\24\2\u04aa\u04ab\7\3\2\2\u04ab\u04ac\5&\24\2\u04ac" +
					"\u04ad\7\b\2\2\u04ad\u04e7\3\2\2\2\u04ae\u04af\7V\2\2\u04af\u04b0\7\7" +
					"\2\2\u04b0\u04b1\5&\24\2\u04b1\u04b2\7\3\2\2\u04b2\u04b3\5&\24\2\u04b3" +
					"\u04b4\7\b\2\2\u04b4\u04e7\3\2\2\2\u04b5\u04b6\7O\2\2\u04b6\u04b7\7\7" +
					"\2\2\u04b7\u04b8\5&\24\2\u04b8\u04b9\7\3\2\2\u04b9\u04ba\5&\24\2\u04ba" +
					"\u04bb\7\b\2\2\u04bb\u04e7\3\2\2\2\u04bc\u04bd\7J\2\2\u04bd\u04be\7\7" +
					"\2\2\u04be\u04bf\5&\24\2\u04bf\u04c0\7\3\2\2\u04c0\u04c1\5&\24\2\u04c1" +
					"\u04c2\7\b\2\2\u04c2\u04e7\3\2\2\2\u04c3\u04c4\7\u00a4\2\2\u04c4\u04c5" +
					"\7\7\2\2\u04c5\u04c6\5&\24\2\u04c6\u04c7\7\3\2\2\u04c7\u04c8\5&\24\2\u04c8" +
					"\u04c9\7\b\2\2\u04c9\u04e7\3\2\2\2\u04ca\u04cb\7T\2\2\u04cb\u04cc\7\7" +
					"\2\2\u04cc\u04cd\5&\24\2\u04cd\u04ce\7\3\2\2\u04ce\u04cf\5&\24\2\u04cf" +
					"\u04d0\7\b\2\2\u04d0\u04e7\3\2\2\2\u04d1\u04d2\7W\2\2\u04d2\u04d3\7\7" +
					"\2\2\u04d3\u04d4\5&\24\2\u04d4\u04d5\7\3\2\2\u04d5\u04d6\5&\24\2\u04d6" +
					"\u04d7\7\b\2\2\u04d7\u04e7\3\2\2\2\u04d8\u04d9\7X\2\2\u04d9\u04da\7\7" +
					"\2\2\u04da\u04db\5&\24\2\u04db\u04dc\7\3\2\2\u04dc\u04dd\5&\24\2\u04dd" +
					"\u04de\7\b\2\2\u04de\u04e7\3\2\2\2\u04df\u04e0\7Y\2\2\u04e0\u04e1\7\7" +
					"\2\2\u04e1\u04e2\5&\24\2\u04e2\u04e3\7\3\2\2\u04e3\u04e4\5&\24\2\u04e4" +
					"\u04e5\7\b\2\2\u04e5\u04e7\3\2\2\2\u04e6\u03ad\3\2\2\2\u04e6\u03ae\3\2" +
					"\2\2\u04e6\u03af\3\2\2\2\u04e6\u03b0\3\2\2\2\u04e6\u03b1\3\2\2\2\u04e6" +
					"\u03b2\3\2\2\2\u04e6\u03b3\3\2\2\2\u04e6\u03b4\3\2\2\2\u04e6\u03b5\3\2" +
					"\2\2\u04e6\u03b6\3\2\2\2\u04e6\u03b7\3\2\2\2\u04e6\u03b8\3\2\2\2\u04e6" +
					"\u03c3\3\2\2\2\u04e6\u03ce\3\2\2\2\u04e6\u03d9\3\2\2\2\u04e6\u03e6\3\2" +
					"\2\2\u04e6\u03ec\3\2\2\2\u04e6\u03f3\3\2\2\2\u04e6\u03fa\3\2\2\2\u04e6" +
					"\u0401\3\2\2\2\u04e6\u0408\3\2\2\2\u04e6\u040f\3\2\2\2\u04e6\u0416\3\2" +
					"\2\2\u04e6\u041d\3\2\2\2\u04e6\u0424\3\2\2\2\u04e6\u042b\3\2\2\2\u04e6" +
					"\u0432\3\2\2\2\u04e6\u0439\3\2\2\2\u04e6\u0440\3\2\2\2\u04e6\u044b\3\2" +
					"\2\2\u04e6\u0458\3\2\2\2\u04e6\u0460\3\2\2\2\u04e6\u0468\3\2\2\2\u04e6" +
					"\u046f\3\2\2\2\u04e6\u0476\3\2\2\2\u04e6\u047d\3\2\2\2\u04e6\u0484\3\2" +
					"\2\2\u04e6\u048b\3\2\2\2\u04e6\u0492\3\2\2\2\u04e6\u0499\3\2\2\2\u04e6" +
					"\u04a0\3\2\2\2\u04e6\u04a7\3\2\2\2\u04e6\u04ae\3\2\2\2\u04e6\u04b5\3\2" +
					"\2\2\u04e6\u04bc\3\2\2\2\u04e6\u04c3\3\2\2\2\u04e6\u04ca\3\2\2\2\u04e6" +
					"\u04d1\3\2\2\2\u04e6\u04d8\3\2\2\2\u04e6\u04df\3\2\2\2\u04e7)\3\2\2\2" +
					"\u04e8\u04e9\t\3\2\2\u04e9+\3\2\2\2c/\66:?ELT[_\u008e\u0091\u0094\u0097" +
					"\u009a\u009f\u00a6\u00aa\u00af\u00b3\u00b6\u00bc\u00d8\u00e6\u00ed\u00f2" +
					"\u00f9\u00ff\u0108\u010d\u0132\u0143\u0153\u0156\u0163\u0166\u016c\u016f" +
					"\u0178\u017b\u0184\u0187\u0190\u0193\u019e\u01aa\u01b6\u01c2\u01ce\u01d8" +
					"\u01e1\u01ea\u01f3\u0223\u02a1\u02aa\u02b2\u02b5\u02bb\u02bf\u02c4\u02cb" +
					"\u02d1\u02d7\u02dc\u02e1\u02e6\u02ea\u02f2\u02f7\u02fd\u0303\u0305\u030e" +
					"\u0317\u031b\u031e\u0338\u033f\u0352\u035a\u037c\u0388\u0391\u039c\u039f" +
					"\u03a2\u03a5\u03a7\u03be\u03c9\u03d4\u03db\u03de\u03e1\u0447\u0454\u04e6";
	public static final ATN _ATN =
			new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
			new PredictionContextCache();
	private static final String[] _LITERAL_NAMES = {
			null, "','", "'catch'", "'filter'", "'comdat'", "'('", "')'", "'define'",
			"'declare'", "'{'", "'}'", "'alignstack'", "'='", "'align'", "'alwaysinline'",
			"'builtin'", "'cold'", "'convergent'", "'inaccessiblememonly'", "'inaccessiblemem_or_argmemonly'",
			"'inlinehint'", "'jumptable'", "'minsize'", "'naked'", "'nobuiltin'",
			"'noduplicate'", "'noimplicitfloat'", "'noinline'", "'nonlazybind'", "'noredzone'",
			"'noreturn'", "'norecurse'", "'nounwind'", "'optnone'", "'optsize'", "'readnone'",
			"'readonly'", "'argmemonly'", "'returns_twice'", "'ssp'", "'sspreq'",
			"'sspstrong'", "'safestack'", "'sanitize_address'", "'sanitize_thread'",
			"'sanitize_memory'", "'uwtable'", "'thunk'", "'ret'", "'void'", "'br'",
			"'switch'", "'['", "']'", "'indirectbr'", "'invoke'", "'to'", "'unwind'",
			"'resume'", "'cleanupret'", "'from'", "'caller'", "'catchret'", "'catchswitch'",
			"'within'", "'catchpad'", "'cleanuppad'", "'add'", "'nuw'", "'nsw'", "'sub'",
			"'mul'", "'shl'", "'fadd'", "'fsub'", "'fmul'", "'fdiv'", "'frem'", "'sdiv'",
			"'exact'", "'udiv'", "'lshr'", "'ashr'", "'urem'", "'srem'", "'and'",
			"'or'", "'xor'", "'icmp'", "'fcmp'", "'trunc'", "'zext'", "'sext'", "'fptrunc'",
			"'fpext'", "'bitcast'", "'addrspacecast'", "'uitofp'", "'sitofp'", "'fptoui'",
			"'fptosi'", "'inttoptr'", "'ptrtoint'", "'select'", "'va_arg'", "'extractelement'",
			"'insertelement'", "'shufflevector'", "'phi'", "'landingpad'", "'cleanup'",
			"'tail'", "'musttail'", "'notail'", "'call'", "'alloca'", "'inalloca'",
			"'load'", "'volatile'", "'atomic'", "'singlethread'", "'...'", "'byval'",
			"'dereferenceable'", "'dereferenceable_or_null'", "'inreg'", "'nest'",
			"'noalias'", "'nocapture'", "'nonnull'", "'returned'", "'signext'", "'sret'",
			"'zeroext'", "'section'", "'half'", "'float'", "'double'", "'fp128'",
			"'x86_fp80'", "'ppc_fp128'", "'x86_mmx'", "'*'", "'<'", "'x'", "'>'",
			"'label'", "'token'", "'metadata'", "'opaque'", "'true'", "'false'", "'null'",
			"'undef'", "'zeroinitializer'", "'none'", "'asm'", "'sideeffect'", "'inteldialect'",
			"'blockaddress'", "'extractvalue'", "'insertvalue'", "'lshl'", null, null,
			"'unnamed_addr'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, "AtomicOrdering", "AttributeGroupID",
			"UnamedAddress", "CallingConvention", "IntegerType", "Label", "Linkage",
			"LocalIdentifier", "MetadataIdentifier", "DllStorageClass", "Scope", "Visibility",
			"String", "ThreadLocal", "FPPredicate", "IntPredicate", "CharArrayLiteral",
			"ComdatIdentifier", "FloatLiteral", "IntegerLiteral", "FastMathsFlag",
			"GlobalIdentifier", "WS", "COMMENT"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	static {
		RuntimeMetaData.checkVersion("4.5.1", RuntimeMetaData.VERSION);
	}

	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}

	public LLVMParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() {
		return "LLVM.g4";
	}

	@Override
	public String[] getRuleNames() {
		return ruleNames;
	}

	@Override
	public String getSerializedATN() {
		return _serializedATN;
	}

	@Override
	public ATN getATN() {
		return _ATN;
	}

	public final ModuleContext module() throws RecognitionException {
		ModuleContext _localctx = new ModuleContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_module);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(43);
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
						{
							setState(42);
							entity();
						}
					}
					setState(45);
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while (_la == T__6 || _la == T__7);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ArgumentListContext argumentList() throws RecognitionException {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_argumentList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(47);
				typedValue();
				setState(52);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la == T__0) {
					{
						{
							setState(48);
							match(T__0);
							setState(49);
							typedValue();
						}
					}
					setState(54);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final BasicBlockContext basicBlock() throws RecognitionException {
		BasicBlockContext _localctx = new BasicBlockContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_basicBlock);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(56);
				_la = _input.LA(1);
				if (_la == Label) {
					{
						setState(55);
						match(Label);
					}
				}

				setState(59);
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
						case 1: {
							{
								setState(58);
								statement();
							}
						}
						break;
						default:
							throw new NoViableAltException(this);
					}
					setState(61);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 3, _ctx);
				} while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ClauseContext clause() throws RecognitionException {
		ClauseContext _localctx = new ClauseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_clause);
		try {
			setState(67);
			switch (_input.LA(1)) {
				case T__1:
					enterOuterAlt(_localctx, 1);
				{
					setState(63);
					match(T__1);
					setState(64);
					typedValue();
				}
				break;
				case T__2:
					enterOuterAlt(_localctx, 2);
				{
					setState(65);
					match(T__2);
					setState(66);
					typedValue();
				}
				break;
				default:
					throw new NoViableAltException(this);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ComdatContext comdat() throws RecognitionException {
		ComdatContext _localctx = new ComdatContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_comdat);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(69);
				match(T__0);
				setState(70);
				match(T__3);
				setState(74);
				_la = _input.LA(1);
				if (_la == T__4) {
					{
						setState(71);
						match(T__4);
						setState(72);
						match(ComdatIdentifier);
						setState(73);
						match(T__5);
					}
				}

			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final EntityContext entity() throws RecognitionException {
		EntityContext _localctx = new EntityContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_entity);
		try {
			setState(82);
			switch (_input.LA(1)) {
				case T__6:
					enterOuterAlt(_localctx, 1);
				{
					setState(76);
					match(T__6);
					setState(77);
					functionHeader();
					setState(78);
					functionBody();
				}
				break;
				case T__7:
					enterOuterAlt(_localctx, 2);
				{
					setState(80);
					match(T__7);
					setState(81);
					functionHeader();
				}
				break;
				default:
					throw new NoViableAltException(this);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final FunctionAttributeContext functionAttribute() throws RecognitionException {
		FunctionAttributeContext _localctx = new FunctionAttributeContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_functionAttribute);
		int _la;
		try {
			setState(140);
			switch (getInterpreter().adaptivePredict(_input, 9, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					setState(84);
					match(AttributeGroupID);
					setState(93);
					switch (getInterpreter().adaptivePredict(_input, 8, _ctx)) {
						case 1: {
							setState(85);
							match(T__8);
							setState(89);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46))) != 0) || _la == AttributeGroupID || _la == String) {
								{
									{
										setState(86);
										functionAttribute();
									}
								}
								setState(91);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							setState(92);
							match(T__9);
						}
						break;
					}
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					setState(95);
					match(T__10);
					setState(96);
					match(IntegerLiteral);
				}
				break;
				case 3:
					enterOuterAlt(_localctx, 3);
				{
					setState(97);
					match(T__10);
					setState(98);
					match(T__11);
					setState(99);
					match(IntegerLiteral);
				}
				break;
				case 4:
					enterOuterAlt(_localctx, 4);
				{
					setState(100);
					match(T__12);
					setState(101);
					match(IntegerLiteral);
				}
				break;
				case 5:
					enterOuterAlt(_localctx, 5);
				{
					setState(102);
					match(T__12);
					setState(103);
					match(T__11);
					setState(104);
					match(IntegerLiteral);
				}
				break;
				case 6:
					enterOuterAlt(_localctx, 6);
				{
					setState(105);
					match(T__13);
				}
				break;
				case 7:
					enterOuterAlt(_localctx, 7);
				{
					setState(106);
					match(T__14);
				}
				break;
				case 8:
					enterOuterAlt(_localctx, 8);
				{
					setState(107);
					match(T__15);
				}
				break;
				case 9:
					enterOuterAlt(_localctx, 9);
				{
					setState(108);
					match(T__16);
				}
				break;
				case 10:
					enterOuterAlt(_localctx, 10);
				{
					setState(109);
					match(T__17);
				}
				break;
				case 11:
					enterOuterAlt(_localctx, 11);
				{
					setState(110);
					match(T__18);
				}
				break;
				case 12:
					enterOuterAlt(_localctx, 12);
				{
					setState(111);
					match(T__19);
				}
				break;
				case 13:
					enterOuterAlt(_localctx, 13);
				{
					setState(112);
					match(T__20);
				}
				break;
				case 14:
					enterOuterAlt(_localctx, 14);
				{
					setState(113);
					match(T__21);
				}
				break;
				case 15:
					enterOuterAlt(_localctx, 15);
				{
					setState(114);
					match(T__22);
				}
				break;
				case 16:
					enterOuterAlt(_localctx, 16);
				{
					setState(115);
					match(T__23);
				}
				break;
				case 17:
					enterOuterAlt(_localctx, 17);
				{
					setState(116);
					match(T__24);
				}
				break;
				case 18:
					enterOuterAlt(_localctx, 18);
				{
					setState(117);
					match(T__25);
				}
				break;
				case 19:
					enterOuterAlt(_localctx, 19);
				{
					setState(118);
					match(T__26);
				}
				break;
				case 20:
					enterOuterAlt(_localctx, 20);
				{
					setState(119);
					match(T__27);
				}
				break;
				case 21:
					enterOuterAlt(_localctx, 21);
				{
					setState(120);
					match(T__28);
				}
				break;
				case 22:
					enterOuterAlt(_localctx, 22);
				{
					setState(121);
					match(T__29);
				}
				break;
				case 23:
					enterOuterAlt(_localctx, 23);
				{
					setState(122);
					match(T__30);
				}
				break;
				case 24:
					enterOuterAlt(_localctx, 24);
				{
					setState(123);
					match(T__31);
				}
				break;
				case 25:
					enterOuterAlt(_localctx, 25);
				{
					setState(124);
					match(T__32);
				}
				break;
				case 26:
					enterOuterAlt(_localctx, 26);
				{
					setState(125);
					match(T__33);
				}
				break;
				case 27:
					enterOuterAlt(_localctx, 27);
				{
					setState(126);
					match(T__34);
				}
				break;
				case 28:
					enterOuterAlt(_localctx, 28);
				{
					setState(127);
					match(T__35);
				}
				break;
				case 29:
					enterOuterAlt(_localctx, 29);
				{
					setState(128);
					match(T__36);
				}
				break;
				case 30:
					enterOuterAlt(_localctx, 30);
				{
					setState(129);
					match(T__37);
				}
				break;
				case 31:
					enterOuterAlt(_localctx, 31);
				{
					setState(130);
					match(T__38);
				}
				break;
				case 32:
					enterOuterAlt(_localctx, 32);
				{
					setState(131);
					match(T__39);
				}
				break;
				case 33:
					enterOuterAlt(_localctx, 33);
				{
					setState(132);
					match(T__40);
				}
				break;
				case 34:
					enterOuterAlt(_localctx, 34);
				{
					setState(133);
					match(T__41);
				}
				break;
				case 35:
					enterOuterAlt(_localctx, 35);
				{
					setState(134);
					match(T__42);
				}
				break;
				case 36:
					enterOuterAlt(_localctx, 36);
				{
					setState(135);
					match(T__43);
				}
				break;
				case 37:
					enterOuterAlt(_localctx, 37);
				{
					setState(136);
					match(T__44);
				}
				break;
				case 38:
					enterOuterAlt(_localctx, 38);
				{
					setState(137);
					match(T__45);
				}
				break;
				case 39:
					enterOuterAlt(_localctx, 39);
				{
					setState(138);
					match(T__46);
				}
				break;
				case 40:
					enterOuterAlt(_localctx, 40);
				{
					setState(139);
					match(String);
				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final FunctionHeaderContext functionHeader() throws RecognitionException {
		FunctionHeaderContext _localctx = new FunctionHeaderContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_functionHeader);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(143);
				_la = _input.LA(1);
				if (_la == Linkage) {
					{
						setState(142);
						match(Linkage);
					}
				}

				setState(146);
				_la = _input.LA(1);
				if (_la == Visibility) {
					{
						setState(145);
						match(Visibility);
					}
				}

				setState(149);
				_la = _input.LA(1);
				if (_la == DllStorageClass) {
					{
						setState(148);
						match(DllStorageClass);
					}
				}

				setState(152);
				_la = _input.LA(1);
				if (_la == CallingConvention) {
					{
						setState(151);
						match(CallingConvention);
					}
				}

				setState(157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la == T__12 || ((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (T__122 - 123)) | (1L << (T__123 - 123)) | (1L << (T__124 - 123)) | (1L << (T__126 - 123)) | (1L << (T__128 - 123)) | (1L << (T__130 - 123)) | (1L << (T__132 - 123)) | (1L << (String - 123)))) != 0)) {
					{
						{
							setState(154);
							returnAttribute();
						}
					}
					setState(159);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(160);
				type(0);
				setState(161);
				match(GlobalIdentifier);
				setState(162);
				match(T__4);
				setState(164);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__48) | (1L << T__51))) != 0) || ((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (T__120 - 121)) | (1L << (T__134 - 121)) | (1L << (T__135 - 121)) | (1L << (T__136 - 121)) | (1L << (T__137 - 121)) | (1L << (T__138 - 121)) | (1L << (T__139 - 121)) | (1L << (T__140 - 121)) | (1L << (T__142 - 121)) | (1L << (T__145 - 121)) | (1L << (T__146 - 121)) | (1L << (T__147 - 121)) | (1L << (T__148 - 121)) | (1L << (IntegerType - 121)) | (1L << (LocalIdentifier - 121)))) != 0)) {
					{
						setState(163);
						parameterList();
					}
				}

				setState(166);
				match(T__5);
				setState(168);
				_la = _input.LA(1);
				if (_la == UnamedAddress) {
					{
						setState(167);
						match(UnamedAddress);
					}
				}

				setState(173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46))) != 0) || _la == AttributeGroupID || _la == String) {
					{
						{
							setState(170);
							functionAttribute();
						}
					}
					setState(175);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(177);
				switch (getInterpreter().adaptivePredict(_input, 18, _ctx)) {
					case 1: {
						setState(176);
						section();
					}
					break;
				}
				setState(180);
				_la = _input.LA(1);
				if (_la == T__0) {
					{
						setState(179);
						comdat();
					}
				}

			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final FunctionBodyContext functionBody() throws RecognitionException {
		FunctionBodyContext _localctx = new FunctionBodyContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_functionBody);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(182);
				match(T__8);
				setState(184);
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
						{
							setState(183);
							basicBlock();
						}
					}
					setState(186);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				while (((((_la - 48)) & ~0x3f) == 0 && ((1L << (_la - 48)) & ((1L << (T__47 - 48)) | (1L << (T__49 - 48)) | (1L << (T__50 - 48)) | (1L << (T__53 - 48)) | (1L << (T__54 - 48)) | (1L << (T__57 - 48)) | (1L << (T__58 - 48)) | (1L << (T__61 - 48)) | (1L << (T__62 - 48)) | (1L << (T__64 - 48)) | (1L << (T__65 - 48)) | (1L << (T__66 - 48)) | (1L << (T__69 - 48)) | (1L << (T__70 - 48)) | (1L << (T__71 - 48)) | (1L << (T__72 - 48)) | (1L << (T__73 - 48)) | (1L << (T__74 - 48)) | (1L << (T__75 - 48)) | (1L << (T__76 - 48)) | (1L << (T__77 - 48)) | (1L << (T__79 - 48)) | (1L << (T__80 - 48)) | (1L << (T__81 - 48)) | (1L << (T__82 - 48)) | (1L << (T__83 - 48)) | (1L << (T__84 - 48)) | (1L << (T__85 - 48)) | (1L << (T__86 - 48)) | (1L << (T__87 - 48)) | (1L << (T__88 - 48)) | (1L << (T__89 - 48)) | (1L << (T__90 - 48)) | (1L << (T__91 - 48)) | (1L << (T__92 - 48)) | (1L << (T__93 - 48)) | (1L << (T__94 - 48)) | (1L << (T__95 - 48)) | (1L << (T__96 - 48)) | (1L << (T__97 - 48)) | (1L << (T__98 - 48)) | (1L << (T__99 - 48)) | (1L << (T__100 - 48)) | (1L << (T__101 - 48)) | (1L << (T__102 - 48)) | (1L << (T__103 - 48)) | (1L << (T__104 - 48)) | (1L << (T__105 - 48)) | (1L << (T__106 - 48)) | (1L << (T__107 - 48)) | (1L << (T__108 - 48)) | (1L << (T__110 - 48)))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (T__111 - 112)) | (1L << (T__112 - 112)) | (1L << (T__113 - 112)) | (1L << (T__114 - 112)) | (1L << (T__116 - 112)) | (1L << (Label - 112)) | (1L << (LocalIdentifier - 112)))) != 0));
				setState(188);
				match(T__9);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final InstructionContext instruction() throws RecognitionException {
		InstructionContext _localctx = new InstructionContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_instruction);
		int _la;
		try {
			int _alt;
			setState(771);
			switch (getInterpreter().adaptivePredict(_input, 71, _ctx)) {
				case 1:
					enterOuterAlt(_localctx, 1);
				{
					setState(190);
					match(T__47);
					setState(191);
					typedValue();
				}
				break;
				case 2:
					enterOuterAlt(_localctx, 2);
				{
					setState(192);
					match(T__47);
					setState(193);
					match(T__48);
				}
				break;
				case 3:
					enterOuterAlt(_localctx, 3);
				{
					setState(194);
					match(T__49);
					setState(195);
					typedValue();
				}
				break;
				case 4:
					enterOuterAlt(_localctx, 4);
				{
					setState(196);
					match(T__49);
					setState(197);
					typedValue();
					setState(198);
					match(T__0);
					setState(199);
					typedValue();
					setState(200);
					match(T__0);
					setState(201);
					typedValue();
				}
				break;
				case 5:
					enterOuterAlt(_localctx, 5);
				{
					setState(203);
					match(T__50);
					setState(204);
					typedValue();
					setState(205);
					match(T__0);
					setState(206);
					typedValue();
					setState(207);
					match(T__51);
					setState(214);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__48) | (1L << T__51))) != 0) || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (T__134 - 135)) | (1L << (T__135 - 135)) | (1L << (T__136 - 135)) | (1L << (T__137 - 135)) | (1L << (T__138 - 135)) | (1L << (T__139 - 135)) | (1L << (T__140 - 135)) | (1L << (T__142 - 135)) | (1L << (T__145 - 135)) | (1L << (T__146 - 135)) | (1L << (T__147 - 135)) | (1L << (T__148 - 135)) | (1L << (IntegerType - 135)) | (1L << (LocalIdentifier - 135)))) != 0)) {
						{
							{
								setState(208);
								typedValue();
								setState(209);
								match(T__0);
								setState(210);
								typedValue();
							}
						}
						setState(216);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(217);
					match(T__52);
				}
				break;
				case 6:
					enterOuterAlt(_localctx, 6);
				{
					setState(219);
					match(T__53);
					setState(220);
					typedValue();
					setState(221);
					match(T__0);
					setState(222);
					match(T__51);
					setState(223);
					typedValue();
					setState(228);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == T__0) {
						{
							{
								setState(224);
								match(T__0);
								setState(225);
								typedValue();
							}
						}
						setState(230);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(231);
					match(T__52);
				}
				break;
				case 7:
					enterOuterAlt(_localctx, 7);
				{
					setState(233);
					match(T__54);
					setState(235);
					_la = _input.LA(1);
					if (_la == CallingConvention) {
						{
							setState(234);
							match(CallingConvention);
						}
					}

					setState(240);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == T__12 || ((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (T__122 - 123)) | (1L << (T__123 - 123)) | (1L << (T__124 - 123)) | (1L << (T__126 - 123)) | (1L << (T__128 - 123)) | (1L << (T__130 - 123)) | (1L << (T__132 - 123)) | (1L << (String - 123)))) != 0)) {
						{
							{
								setState(237);
								returnAttribute();
							}
						}
						setState(242);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(243);
					type(0);
					setState(244);
					match(GlobalIdentifier);
					setState(245);
					match(T__4);
					setState(247);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__48) | (1L << T__51))) != 0) || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (T__134 - 135)) | (1L << (T__135 - 135)) | (1L << (T__136 - 135)) | (1L << (T__137 - 135)) | (1L << (T__138 - 135)) | (1L << (T__139 - 135)) | (1L << (T__140 - 135)) | (1L << (T__142 - 135)) | (1L << (T__145 - 135)) | (1L << (T__146 - 135)) | (1L << (T__147 - 135)) | (1L << (T__148 - 135)) | (1L << (IntegerType - 135)) | (1L << (LocalIdentifier - 135)))) != 0)) {
						{
							setState(246);
							argumentList();
						}
					}

					setState(249);
					match(T__5);
					setState(253);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46))) != 0) || _la == AttributeGroupID || _la == String) {
						{
							{
								setState(250);
								functionAttribute();
							}
						}
						setState(255);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(267);
					_la = _input.LA(1);
					if (_la == T__51) {
						{
							setState(256);
							match(T__51);
							setState(257);
							operandBundle();
							setState(262);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la == T__0) {
								{
									{
										setState(258);
										match(T__0);
										setState(259);
										operandBundle();
									}
								}
								setState(264);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							setState(265);
							match(T__52);
						}
					}

					setState(269);
					match(T__55);
					setState(270);
					typedValue();
					setState(271);
					match(T__56);
					setState(272);
					typedValue();
				}
				break;
				case 8:
					enterOuterAlt(_localctx, 8);
				{
					setState(274);
					match(T__57);
					setState(275);
					typedValue();
				}
				break;
				case 9:
					enterOuterAlt(_localctx, 9);
				{
					setState(276);
					match(T__58);
					setState(277);
					match(T__59);
					setState(278);
					value();
					setState(279);
					match(T__56);
					setState(280);
					match(T__55);
					setState(281);
					match(T__60);
				}
				break;
				case 10:
					enterOuterAlt(_localctx, 10);
				{
					setState(283);
					match(T__58);
					setState(284);
					match(T__59);
					setState(285);
					value();
					setState(286);
					match(T__56);
					setState(287);
					typedValue();
				}
				break;
				case 11:
					enterOuterAlt(_localctx, 11);
				{
					setState(289);
					match(T__61);
					setState(290);
					match(T__59);
					setState(291);
					value();
					setState(292);
					match(T__55);
					setState(293);
					typedValue();
				}
				break;
				case 12:
					enterOuterAlt(_localctx, 12);
				{
					setState(295);
					match(T__62);
					setState(296);
					match(T__63);
					setState(297);
					value();
					setState(298);
					match(T__51);
					setState(299);
					typedValue();
					setState(304);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == T__0) {
						{
							{
								setState(300);
								match(T__0);
								setState(301);
								typedValue();
							}
						}
						setState(306);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(307);
					match(T__52);
					setState(308);
					match(T__56);
					setState(309);
					match(T__55);
					setState(310);
					match(T__60);
				}
				break;
				case 13:
					enterOuterAlt(_localctx, 13);
				{
					setState(312);
					match(T__62);
					setState(313);
					match(T__63);
					setState(314);
					value();
					setState(315);
					match(T__51);
					setState(316);
					typedValue();
					setState(321);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == T__0) {
						{
							{
								setState(317);
								match(T__0);
								setState(318);
								typedValue();
							}
						}
						setState(323);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(324);
					match(T__52);
					setState(325);
					match(T__56);
					setState(326);
					typedValue();
				}
				break;
				case 14:
					enterOuterAlt(_localctx, 14);
				{
					setState(328);
					match(T__64);
					setState(329);
					match(T__63);
					setState(330);
					value();
					setState(331);
					match(T__51);
					setState(340);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__48) | (1L << T__51))) != 0) || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (T__134 - 135)) | (1L << (T__135 - 135)) | (1L << (T__136 - 135)) | (1L << (T__137 - 135)) | (1L << (T__138 - 135)) | (1L << (T__139 - 135)) | (1L << (T__140 - 135)) | (1L << (T__142 - 135)) | (1L << (T__145 - 135)) | (1L << (T__146 - 135)) | (1L << (T__147 - 135)) | (1L << (T__148 - 135)) | (1L << (IntegerType - 135)) | (1L << (LocalIdentifier - 135)))) != 0)) {
						{
							setState(332);
							typedValue();
							setState(337);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la == T__0) {
								{
									{
										setState(333);
										match(T__0);
										setState(334);
										typedValue();
									}
								}
								setState(339);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
						}
					}

					setState(342);
					match(T__52);
				}
				break;
				case 15:
					enterOuterAlt(_localctx, 15);
				{
					setState(344);
					match(T__65);
					setState(345);
					match(T__63);
					setState(346);
					value();
					setState(347);
					match(T__51);
					setState(356);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__48) | (1L << T__51))) != 0) || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (T__134 - 135)) | (1L << (T__135 - 135)) | (1L << (T__136 - 135)) | (1L << (T__137 - 135)) | (1L << (T__138 - 135)) | (1L << (T__139 - 135)) | (1L << (T__140 - 135)) | (1L << (T__142 - 135)) | (1L << (T__145 - 135)) | (1L << (T__146 - 135)) | (1L << (T__147 - 135)) | (1L << (T__148 - 135)) | (1L << (IntegerType - 135)) | (1L << (LocalIdentifier - 135)))) != 0)) {
						{
							setState(348);
							typedValue();
							setState(353);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la == T__0) {
								{
									{
										setState(349);
										match(T__0);
										setState(350);
										typedValue();
									}
								}
								setState(355);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
						}
					}

					setState(358);
					match(T__52);
				}
				break;
				case 16:
					enterOuterAlt(_localctx, 16);
				{
					setState(360);
					match(T__66);
					setState(362);
					_la = _input.LA(1);
					if (_la == T__67) {
						{
							setState(361);
							match(T__67);
						}
					}

					setState(365);
					_la = _input.LA(1);
					if (_la == T__68) {
						{
							setState(364);
							match(T__68);
						}
					}

					setState(367);
					type(0);
					setState(368);
					value();
					setState(369);
					match(T__0);
					setState(370);
					value();
				}
				break;
				case 17:
					enterOuterAlt(_localctx, 17);
				{
					setState(372);
					match(T__69);
					setState(374);
					_la = _input.LA(1);
					if (_la == T__67) {
						{
							setState(373);
							match(T__67);
						}
					}

					setState(377);
					_la = _input.LA(1);
					if (_la == T__68) {
						{
							setState(376);
							match(T__68);
						}
					}

					setState(379);
					type(0);
					setState(380);
					value();
					setState(381);
					match(T__0);
					setState(382);
					value();
				}
				break;
				case 18:
					enterOuterAlt(_localctx, 18);
				{
					setState(384);
					match(T__70);
					setState(386);
					_la = _input.LA(1);
					if (_la == T__67) {
						{
							setState(385);
							match(T__67);
						}
					}

					setState(389);
					_la = _input.LA(1);
					if (_la == T__68) {
						{
							setState(388);
							match(T__68);
						}
					}

					setState(391);
					type(0);
					setState(392);
					value();
					setState(393);
					match(T__0);
					setState(394);
					value();
				}
				break;
				case 19:
					enterOuterAlt(_localctx, 19);
				{
					setState(396);
					match(T__71);
					setState(398);
					_la = _input.LA(1);
					if (_la == T__67) {
						{
							setState(397);
							match(T__67);
						}
					}

					setState(401);
					_la = _input.LA(1);
					if (_la == T__68) {
						{
							setState(400);
							match(T__68);
						}
					}

					setState(403);
					type(0);
					setState(404);
					value();
					setState(405);
					match(T__0);
					setState(406);
					value();
				}
				break;
				case 20:
					enterOuterAlt(_localctx, 20);
				{
					setState(408);
					match(T__72);
					setState(412);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == FastMathsFlag) {
						{
							{
								setState(409);
								match(FastMathsFlag);
							}
						}
						setState(414);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(415);
					type(0);
					setState(416);
					value();
					setState(417);
					match(T__0);
					setState(418);
					value();
				}
				break;
				case 21:
					enterOuterAlt(_localctx, 21);
				{
					setState(420);
					match(T__73);
					setState(424);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == FastMathsFlag) {
						{
							{
								setState(421);
								match(FastMathsFlag);
							}
						}
						setState(426);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(427);
					type(0);
					setState(428);
					value();
					setState(429);
					match(T__0);
					setState(430);
					value();
				}
				break;
				case 22:
					enterOuterAlt(_localctx, 22);
				{
					setState(432);
					match(T__74);
					setState(436);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == FastMathsFlag) {
						{
							{
								setState(433);
								match(FastMathsFlag);
							}
						}
						setState(438);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(439);
					type(0);
					setState(440);
					value();
					setState(441);
					match(T__0);
					setState(442);
					value();
				}
				break;
				case 23:
					enterOuterAlt(_localctx, 23);
				{
					setState(444);
					match(T__75);
					setState(448);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == FastMathsFlag) {
						{
							{
								setState(445);
								match(FastMathsFlag);
							}
						}
						setState(450);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(451);
					type(0);
					setState(452);
					value();
					setState(453);
					match(T__0);
					setState(454);
					value();
				}
				break;
				case 24:
					enterOuterAlt(_localctx, 24);
				{
					setState(456);
					match(T__76);
					setState(460);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == FastMathsFlag) {
						{
							{
								setState(457);
								match(FastMathsFlag);
							}
						}
						setState(462);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(463);
					type(0);
					setState(464);
					value();
					setState(465);
					match(T__0);
					setState(466);
					value();
				}
				break;
				case 25:
					enterOuterAlt(_localctx, 25);
				{
					setState(468);
					match(T__77);
					setState(470);
					_la = _input.LA(1);
					if (_la == T__78) {
						{
							setState(469);
							match(T__78);
						}
					}

					setState(472);
					type(0);
					setState(473);
					value();
					setState(474);
					match(T__0);
					setState(475);
					value();
				}
				break;
				case 26:
					enterOuterAlt(_localctx, 26);
				{
					setState(477);
					match(T__79);
					setState(479);
					_la = _input.LA(1);
					if (_la == T__78) {
						{
							setState(478);
							match(T__78);
						}
					}

					setState(481);
					type(0);
					setState(482);
					value();
					setState(483);
					match(T__0);
					setState(484);
					value();
				}
				break;
				case 27:
					enterOuterAlt(_localctx, 27);
				{
					setState(486);
					match(T__80);
					setState(488);
					_la = _input.LA(1);
					if (_la == T__78) {
						{
							setState(487);
							match(T__78);
						}
					}

					setState(490);
					type(0);
					setState(491);
					value();
					setState(492);
					match(T__0);
					setState(493);
					value();
				}
				break;
				case 28:
					enterOuterAlt(_localctx, 28);
				{
					setState(495);
					match(T__81);
					setState(497);
					_la = _input.LA(1);
					if (_la == T__78) {
						{
							setState(496);
							match(T__78);
						}
					}

					setState(499);
					type(0);
					setState(500);
					value();
					setState(501);
					match(T__0);
					setState(502);
					value();
				}
				break;
				case 29:
					enterOuterAlt(_localctx, 29);
				{
					setState(504);
					match(T__82);
					setState(505);
					type(0);
					setState(506);
					value();
					setState(507);
					match(T__0);
					setState(508);
					value();
				}
				break;
				case 30:
					enterOuterAlt(_localctx, 30);
				{
					setState(510);
					match(T__83);
					setState(511);
					type(0);
					setState(512);
					value();
					setState(513);
					match(T__0);
					setState(514);
					value();
				}
				break;
				case 31:
					enterOuterAlt(_localctx, 31);
				{
					setState(516);
					match(T__84);
					setState(517);
					type(0);
					setState(518);
					value();
					setState(519);
					match(T__0);
					setState(520);
					value();
				}
				break;
				case 32:
					enterOuterAlt(_localctx, 32);
				{
					setState(522);
					match(T__85);
					setState(523);
					type(0);
					setState(524);
					value();
					setState(525);
					match(T__0);
					setState(526);
					value();
				}
				break;
				case 33:
					enterOuterAlt(_localctx, 33);
				{
					setState(528);
					match(T__86);
					setState(529);
					type(0);
					setState(530);
					value();
					setState(531);
					match(T__0);
					setState(532);
					value();
				}
				break;
				case 34:
					enterOuterAlt(_localctx, 34);
				{
					setState(534);
					match(T__87);
					setState(535);
					match(IntPredicate);
					setState(536);
					type(0);
					setState(537);
					value();
					setState(538);
					match(T__0);
					setState(539);
					value();
				}
				break;
				case 35:
					enterOuterAlt(_localctx, 35);
				{
					setState(541);
					match(T__88);
					setState(545);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == FastMathsFlag) {
						{
							{
								setState(542);
								match(FastMathsFlag);
							}
						}
						setState(547);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(548);
					match(FPPredicate);
					setState(549);
					type(0);
					setState(550);
					value();
					setState(551);
					match(T__0);
					setState(552);
					value();
				}
				break;
				case 36:
					enterOuterAlt(_localctx, 36);
				{
					setState(554);
					match(T__89);
					setState(555);
					typedValue();
					setState(556);
					match(T__55);
					setState(557);
					type(0);
				}
				break;
				case 37:
					enterOuterAlt(_localctx, 37);
				{
					setState(559);
					match(T__90);
					setState(560);
					typedValue();
					setState(561);
					match(T__55);
					setState(562);
					type(0);
				}
				break;
				case 38:
					enterOuterAlt(_localctx, 38);
				{
					setState(564);
					match(T__91);
					setState(565);
					typedValue();
					setState(566);
					match(T__55);
					setState(567);
					type(0);
				}
				break;
				case 39:
					enterOuterAlt(_localctx, 39);
				{
					setState(569);
					match(T__91);
					setState(570);
					typedValue();
					setState(571);
					match(T__55);
					setState(572);
					type(0);
				}
				break;
				case 40:
					enterOuterAlt(_localctx, 40);
				{
					setState(574);
					match(T__92);
					setState(575);
					typedValue();
					setState(576);
					match(T__55);
					setState(577);
					type(0);
				}
				break;
				case 41:
					enterOuterAlt(_localctx, 41);
				{
					setState(579);
					match(T__93);
					setState(580);
					typedValue();
					setState(581);
					match(T__55);
					setState(582);
					type(0);
				}
				break;
				case 42:
					enterOuterAlt(_localctx, 42);
				{
					setState(584);
					match(T__94);
					setState(585);
					typedValue();
					setState(586);
					match(T__55);
					setState(587);
					type(0);
				}
				break;
				case 43:
					enterOuterAlt(_localctx, 43);
				{
					setState(589);
					match(T__95);
					setState(590);
					typedValue();
					setState(591);
					match(T__55);
					setState(592);
					type(0);
				}
				break;
				case 44:
					enterOuterAlt(_localctx, 44);
				{
					setState(594);
					match(T__96);
					setState(595);
					typedValue();
					setState(596);
					match(T__55);
					setState(597);
					type(0);
				}
				break;
				case 45:
					enterOuterAlt(_localctx, 45);
				{
					setState(599);
					match(T__97);
					setState(600);
					typedValue();
					setState(601);
					match(T__55);
					setState(602);
					type(0);
				}
				break;
				case 46:
					enterOuterAlt(_localctx, 46);
				{
					setState(604);
					match(T__98);
					setState(605);
					typedValue();
					setState(606);
					match(T__55);
					setState(607);
					type(0);
				}
				break;
				case 47:
					enterOuterAlt(_localctx, 47);
				{
					setState(609);
					match(T__99);
					setState(610);
					typedValue();
					setState(611);
					match(T__55);
					setState(612);
					type(0);
				}
				break;
				case 48:
					enterOuterAlt(_localctx, 48);
				{
					setState(614);
					match(T__100);
					setState(615);
					typedValue();
					setState(616);
					match(T__55);
					setState(617);
					type(0);
				}
				break;
				case 49:
					enterOuterAlt(_localctx, 49);
				{
					setState(619);
					match(T__101);
					setState(620);
					typedValue();
					setState(621);
					match(T__55);
					setState(622);
					type(0);
				}
				break;
				case 50:
					enterOuterAlt(_localctx, 50);
				{
					setState(624);
					match(T__102);
					setState(625);
					typedValue();
					setState(626);
					match(T__0);
					setState(627);
					typedValue();
					setState(628);
					match(T__0);
					setState(629);
					typedValue();
				}
				break;
				case 51:
					enterOuterAlt(_localctx, 51);
				{
					setState(631);
					match(T__103);
					setState(632);
					typedValue();
					setState(633);
					match(T__0);
					setState(634);
					type(0);
				}
				break;
				case 52:
					enterOuterAlt(_localctx, 52);
				{
					setState(636);
					match(T__104);
					setState(637);
					typedValue();
					setState(638);
					match(T__0);
					setState(639);
					typedValue();
				}
				break;
				case 53:
					enterOuterAlt(_localctx, 53);
				{
					setState(641);
					match(T__105);
					setState(642);
					typedValue();
					setState(643);
					match(T__0);
					setState(644);
					typedValue();
					setState(645);
					match(T__0);
					setState(646);
					typedValue();
				}
				break;
				case 54:
					enterOuterAlt(_localctx, 54);
				{
					setState(648);
					match(T__106);
					setState(649);
					typedValue();
					setState(650);
					match(T__0);
					setState(651);
					typedValue();
					setState(652);
					match(T__0);
					setState(653);
					typedValue();
				}
				break;
				case 55:
					enterOuterAlt(_localctx, 55);
				{
					setState(655);
					match(T__107);
					setState(656);
					type(0);
					setState(657);
					match(T__51);
					setState(658);
					value();
					setState(659);
					match(T__0);
					setState(660);
					value();
					setState(661);
					match(T__52);
					setState(671);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == T__0) {
						{
							{
								setState(662);
								match(T__0);
								setState(663);
								match(T__51);
								setState(664);
								value();
								setState(665);
								match(T__0);
								setState(666);
								value();
								setState(667);
								match(T__52);
							}
						}
						setState(673);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
				}
				break;
				case 56:
					enterOuterAlt(_localctx, 56);
				{
					setState(674);
					match(T__108);
					setState(675);
					type(0);
					setState(676);
					match(T__109);
					setState(680);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == T__1 || _la == T__2) {
						{
							{
								setState(677);
								clause();
							}
						}
						setState(682);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
				}
				break;
				case 57:
					enterOuterAlt(_localctx, 57);
				{
					setState(683);
					match(T__108);
					setState(684);
					type(0);
					setState(686);
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
							{
								setState(685);
								clause();
							}
						}
						setState(688);
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while (_la == T__1 || _la == T__2);
				}
				break;
				case 58:
					enterOuterAlt(_localctx, 58);
				{
					setState(691);
					_la = _input.LA(1);
					if (((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (T__110 - 111)) | (1L << (T__111 - 111)) | (1L << (T__112 - 111)))) != 0)) {
						{
							setState(690);
							_la = _input.LA(1);
							if (!(((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (T__110 - 111)) | (1L << (T__111 - 111)) | (1L << (T__112 - 111)))) != 0))) {
								_errHandler.recoverInline(this);
							} else {
								consume();
							}
						}
					}

					setState(693);
					match(T__113);
					setState(697);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == FastMathsFlag) {
						{
							{
								setState(694);
								match(FastMathsFlag);
							}
						}
						setState(699);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(701);
					_la = _input.LA(1);
					if (_la == CallingConvention) {
						{
							setState(700);
							match(CallingConvention);
						}
					}

					setState(706);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == T__12 || ((((_la - 123)) & ~0x3f) == 0 && ((1L << (_la - 123)) & ((1L << (T__122 - 123)) | (1L << (T__123 - 123)) | (1L << (T__124 - 123)) | (1L << (T__126 - 123)) | (1L << (T__128 - 123)) | (1L << (T__130 - 123)) | (1L << (T__132 - 123)) | (1L << (String - 123)))) != 0)) {
						{
							{
								setState(703);
								returnAttribute();
							}
						}
						setState(708);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(709);
					type(0);
					setState(710);
					value();
					setState(711);
					match(T__4);
					setState(713);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__48) | (1L << T__51))) != 0) || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (T__134 - 135)) | (1L << (T__135 - 135)) | (1L << (T__136 - 135)) | (1L << (T__137 - 135)) | (1L << (T__138 - 135)) | (1L << (T__139 - 135)) | (1L << (T__140 - 135)) | (1L << (T__142 - 135)) | (1L << (T__145 - 135)) | (1L << (T__146 - 135)) | (1L << (T__147 - 135)) | (1L << (T__148 - 135)) | (1L << (IntegerType - 135)) | (1L << (LocalIdentifier - 135)))) != 0)) {
						{
							setState(712);
							argumentList();
						}
					}

					setState(715);
					match(T__5);
					setState(719);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 61, _ctx);
					while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
						if (_alt == 1) {
							{
								{
									setState(716);
									functionAttribute();
								}
							}
						}
						setState(721);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input, 61, _ctx);
					}
					setState(725);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == String) {
						{
							{
								setState(722);
								operandBundle();
							}
						}
						setState(727);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
				}
				break;
				case 59:
					enterOuterAlt(_localctx, 59);
				{
					setState(728);
					match(T__114);
					setState(730);
					_la = _input.LA(1);
					if (_la == T__115) {
						{
							setState(729);
							match(T__115);
						}
					}

					setState(732);
					type(0);
					setState(735);
					switch (getInterpreter().adaptivePredict(_input, 64, _ctx)) {
						case 1: {
							setState(733);
							match(T__0);
							setState(734);
							typedValue();
						}
						break;
					}
					setState(740);
					_la = _input.LA(1);
					if (_la == T__0) {
						{
							setState(737);
							match(T__0);
							setState(738);
							match(T__12);
							setState(739);
							match(IntegerLiteral);
						}
					}

				}
				break;
				case 60:
					enterOuterAlt(_localctx, 60);
				{
					setState(742);
					match(T__116);
					setState(744);
					_la = _input.LA(1);
					if (_la == T__117) {
						{
							setState(743);
							match(T__117);
						}
					}

					setState(746);
					type(0);
					setState(747);
					match(T__0);
					setState(748);
					typedValue();
					setState(752);
					_la = _input.LA(1);
					if (_la == T__0) {
						{
							setState(749);
							match(T__0);
							setState(750);
							match(T__12);
							setState(751);
							match(IntegerLiteral);
						}
					}

				}
				break;
				case 61:
					enterOuterAlt(_localctx, 61);
				{
					setState(754);
					match(T__116);
					setState(755);
					match(T__118);
					setState(757);
					_la = _input.LA(1);
					if (_la == T__117) {
						{
							setState(756);
							match(T__117);
						}
					}

					setState(759);
					type(0);
					setState(760);
					match(T__0);
					setState(761);
					typedValue();
					setState(763);
					_la = _input.LA(1);
					if (_la == T__119) {
						{
							setState(762);
							match(T__119);
						}
					}

					setState(765);
					match(AtomicOrdering);
					setState(769);
					_la = _input.LA(1);
					if (_la == T__0) {
						{
							setState(766);
							match(T__0);
							setState(767);
							match(T__12);
							setState(768);
							match(IntegerLiteral);
						}
					}

				}
				break;
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final OperandBundleContext operandBundle() throws RecognitionException {
		OperandBundleContext _localctx = new OperandBundleContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_operandBundle);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(773);
				match(String);
				setState(774);
				match(T__4);
				setState(775);
				typedValue();
				setState(780);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la == T__0) {
					{
						{
							setState(776);
							match(T__0);
							setState(777);
							typedValue();
						}
					}
					setState(782);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(783);
				match(T__5);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_parameter);
		int _la;
		try {
			setState(796);
			switch (_input.LA(1)) {
				case T__8:
				case T__48:
				case T__51:
				case T__134:
				case T__135:
				case T__136:
				case T__137:
				case T__138:
				case T__139:
				case T__140:
				case T__142:
				case T__145:
				case T__146:
				case T__147:
				case T__148:
				case IntegerType:
				case LocalIdentifier:
					enterOuterAlt(_localctx, 1);
				{
					setState(785);
					type(0);
					setState(789);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__34) | (1L << T__35))) != 0) || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (T__115 - 116)) | (1L << (T__121 - 116)) | (1L << (T__122 - 116)) | (1L << (T__123 - 116)) | (1L << (T__124 - 116)) | (1L << (T__125 - 116)) | (1L << (T__126 - 116)) | (1L << (T__127 - 116)) | (1L << (T__128 - 116)) | (1L << (T__129 - 116)) | (1L << (T__130 - 116)) | (1L << (T__131 - 116)) | (1L << (T__132 - 116)) | (1L << (String - 116)))) != 0)) {
						{
							{
								setState(786);
								parameterAttribute();
							}
						}
						setState(791);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(793);
					_la = _input.LA(1);
					if (_la == LocalIdentifier) {
						{
							setState(792);
							match(LocalIdentifier);
						}
					}

				}
				break;
				case T__120:
					enterOuterAlt(_localctx, 2);
				{
					setState(795);
					match(T__120);
				}
				break;
				default:
					throw new NoViableAltException(this);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ParameterAttributeContext parameterAttribute() throws RecognitionException {
		ParameterAttributeContext _localctx = new ParameterAttributeContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_parameterAttribute);
		try {
			setState(822);
			switch (_input.LA(1)) {
				case T__12:
					enterOuterAlt(_localctx, 1);
				{
					setState(798);
					match(T__12);
					setState(799);
					match(IntegerLiteral);
				}
				break;
				case T__121:
					enterOuterAlt(_localctx, 2);
				{
					setState(800);
					match(T__121);
				}
				break;
				case T__122:
					enterOuterAlt(_localctx, 3);
				{
					setState(801);
					match(T__122);
					setState(802);
					match(T__4);
					setState(803);
					match(IntegerLiteral);
					setState(804);
					match(T__5);
				}
				break;
				case T__123:
					enterOuterAlt(_localctx, 4);
				{
					setState(805);
					match(T__123);
					setState(806);
					match(T__4);
					setState(807);
					match(IntegerLiteral);
					setState(808);
					match(T__5);
				}
				break;
				case T__115:
					enterOuterAlt(_localctx, 5);
				{
					setState(809);
					match(T__115);
				}
				break;
				case T__124:
					enterOuterAlt(_localctx, 6);
				{
					setState(810);
					match(T__124);
				}
				break;
				case T__125:
					enterOuterAlt(_localctx, 7);
				{
					setState(811);
					match(T__125);
				}
				break;
				case T__126:
					enterOuterAlt(_localctx, 8);
				{
					setState(812);
					match(T__126);
				}
				break;
				case T__127:
					enterOuterAlt(_localctx, 9);
				{
					setState(813);
					match(T__127);
				}
				break;
				case T__128:
					enterOuterAlt(_localctx, 10);
				{
					setState(814);
					match(T__128);
				}
				break;
				case T__34:
					enterOuterAlt(_localctx, 11);
				{
					setState(815);
					match(T__34);
				}
				break;
				case T__35:
					enterOuterAlt(_localctx, 12);
				{
					setState(816);
					match(T__35);
				}
				break;
				case T__129:
					enterOuterAlt(_localctx, 13);
				{
					setState(817);
					match(T__129);
				}
				break;
				case T__130:
					enterOuterAlt(_localctx, 14);
				{
					setState(818);
					match(T__130);
				}
				break;
				case T__131:
					enterOuterAlt(_localctx, 15);
				{
					setState(819);
					match(T__131);
				}
				break;
				case T__132:
					enterOuterAlt(_localctx, 16);
				{
					setState(820);
					match(T__132);
				}
				break;
				case String:
					enterOuterAlt(_localctx, 17);
				{
					setState(821);
					match(String);
				}
				break;
				default:
					throw new NoViableAltException(this);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ParameterListContext parameterList() throws RecognitionException {
		ParameterListContext _localctx = new ParameterListContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_parameterList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(824);
				parameter();
				setState(829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la == T__0) {
					{
						{
							setState(825);
							match(T__0);
							setState(826);
							parameter();
						}
					}
					setState(831);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ReturnAttributeContext returnAttribute() throws RecognitionException {
		ReturnAttributeContext _localctx = new ReturnAttributeContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_returnAttribute);
		try {
			setState(848);
			switch (_input.LA(1)) {
				case String:
					enterOuterAlt(_localctx, 1);
				{
					setState(832);
					match(String);
				}
				break;
				case T__123:
					enterOuterAlt(_localctx, 2);
				{
					setState(833);
					match(T__123);
					setState(834);
					match(T__4);
					setState(835);
					match(IntegerLiteral);
					setState(836);
					match(T__5);
				}
				break;
				case T__122:
					enterOuterAlt(_localctx, 3);
				{
					setState(837);
					match(T__122);
					setState(838);
					match(T__4);
					setState(839);
					match(IntegerLiteral);
					setState(840);
					match(T__5);
				}
				break;
				case T__12:
					enterOuterAlt(_localctx, 4);
				{
					setState(841);
					match(T__12);
					setState(842);
					match(IntegerLiteral);
				}
				break;
				case T__124:
					enterOuterAlt(_localctx, 5);
				{
					setState(843);
					match(T__124);
				}
				break;
				case T__126:
					enterOuterAlt(_localctx, 6);
				{
					setState(844);
					match(T__126);
				}
				break;
				case T__128:
					enterOuterAlt(_localctx, 7);
				{
					setState(845);
					match(T__128);
				}
				break;
				case T__130:
					enterOuterAlt(_localctx, 8);
				{
					setState(846);
					match(T__130);
				}
				break;
				case T__132:
					enterOuterAlt(_localctx, 9);
				{
					setState(847);
					match(T__132);
				}
				break;
				default:
					throw new NoViableAltException(this);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final SectionContext section() throws RecognitionException {
		SectionContext _localctx = new SectionContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(850);
				match(T__0);
				setState(851);
				match(T__133);
				setState(852);
				match(String);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(856);
				_la = _input.LA(1);
				if (_la == LocalIdentifier) {
					{
						setState(854);
						match(LocalIdentifier);
						setState(855);
						match(T__11);
					}
				}

				setState(858);
				instruction();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final TypeContext type() throws RecognitionException {
		return type(0);
	}

	private TypeContext type(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TypeContext _localctx = new TypeContext(_ctx, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 34;
		enterRecursionRule(_localctx, 34, RULE_type, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
				setState(911);
				switch (getInterpreter().adaptivePredict(_input, 82, _ctx)) {
					case 1: {
						_localctx = new IntegerContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;

						setState(861);
						match(IntegerType);
					}
					break;
					case 2: {
						_localctx = new HalfContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(862);
						match(T__134);
					}
					break;
					case 3: {
						_localctx = new FloatContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(863);
						match(T__135);
					}
					break;
					case 4: {
						_localctx = new DoubleContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(864);
						match(T__136);
					}
					break;
					case 5: {
						_localctx = new Fp128Context(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(865);
						match(T__137);
					}
					break;
					case 6: {
						_localctx = new X86_fp80Context(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(866);
						match(T__138);
					}
					break;
					case 7: {
						_localctx = new Ppc_fp128Context(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(867);
						match(T__139);
					}
					break;
					case 8: {
						_localctx = new X86_mmxContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(868);
						match(T__140);
					}
					break;
					case 9: {
						_localctx = new VectorContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(869);
						match(T__142);
						setState(870);
						match(IntegerLiteral);
						setState(871);
						match(T__143);
						setState(872);
						type(0);
						setState(873);
						match(T__144);
					}
					break;
					case 10: {
						_localctx = new LabelContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(875);
						match(T__145);
					}
					break;
					case 11: {
						_localctx = new TokenContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(876);
						match(T__146);
					}
					break;
					case 12: {
						_localctx = new MetadataContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(877);
						match(T__147);
					}
					break;
					case 13: {
						_localctx = new ArrayContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(878);
						match(T__51);
						setState(879);
						match(IntegerLiteral);
						setState(880);
						match(T__143);
						setState(881);
						type(0);
						setState(882);
						match(T__52);
					}
					break;
					case 14: {
						_localctx = new StructContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(884);
						match(T__8);
						setState(885);
						type(0);
						setState(890);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la == T__0) {
							{
								{
									setState(886);
									match(T__0);
									setState(887);
									type(0);
								}
							}
							setState(892);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(893);
						match(T__9);
					}
					break;
					case 15: {
						_localctx = new PackedStructContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(895);
						match(T__142);
						setState(896);
						match(T__8);
						setState(897);
						type(0);
						setState(902);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la == T__0) {
							{
								{
									setState(898);
									match(T__0);
									setState(899);
									type(0);
								}
							}
							setState(904);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(905);
						match(T__9);
						setState(906);
						match(T__144);
					}
					break;
					case 16: {
						_localctx = new OpaqueContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(908);
						match(T__148);
					}
					break;
					case 17: {
						_localctx = new VoidContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(909);
						match(T__48);
					}
					break;
					case 18: {
						_localctx = new IdentifiedTypeContext(_localctx);
						_ctx = _localctx;
						_prevctx = _localctx;
						setState(910);
						match(LocalIdentifier);
					}
					break;
				}
				_ctx.stop = _input.LT(-1);
				setState(933);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input, 87, _ctx);
				while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
					if (_alt == 1) {
						if (_parseListeners != null) triggerExitRuleEvent();
						_prevctx = _localctx;
						{
							setState(931);
							switch (getInterpreter().adaptivePredict(_input, 86, _ctx)) {
								case 1: {
									_localctx = new PointerContext(new TypeContext(_parentctx, _parentState));
									pushNewRecursionContext(_localctx, _startState, RULE_type);
									setState(913);
									if (!(precpred(_ctx, 12)))
										throw new FailedPredicateException(this, "precpred(_ctx, 12)");
									setState(914);
									match(T__141);
								}
								break;
								case 2: {
									_localctx = new FunctionTypeContext(new TypeContext(_parentctx, _parentState));
									pushNewRecursionContext(_localctx, _startState, RULE_type);
									setState(915);
									if (!(precpred(_ctx, 2)))
										throw new FailedPredicateException(this, "precpred(_ctx, 2)");
									setState(916);
									match(T__4);
									setState(925);
									_la = _input.LA(1);
									if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__48) | (1L << T__51))) != 0) || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (T__134 - 135)) | (1L << (T__135 - 135)) | (1L << (T__136 - 135)) | (1L << (T__137 - 135)) | (1L << (T__138 - 135)) | (1L << (T__139 - 135)) | (1L << (T__140 - 135)) | (1L << (T__142 - 135)) | (1L << (T__145 - 135)) | (1L << (T__146 - 135)) | (1L << (T__147 - 135)) | (1L << (T__148 - 135)) | (1L << (IntegerType - 135)) | (1L << (LocalIdentifier - 135)))) != 0)) {
										{
											setState(917);
											type(0);
											setState(922);
											_errHandler.sync(this);
											_la = _input.LA(1);
											while (_la == T__0) {
												{
													{
														setState(918);
														match(T__0);
														setState(919);
														type(0);
													}
												}
												setState(924);
												_errHandler.sync(this);
												_la = _input.LA(1);
											}
										}
									}

									setState(928);
									_la = _input.LA(1);
									if (_la == T__120) {
										{
											setState(927);
											match(T__120);
										}
									}

									setState(930);
									match(T__5);
								}
								break;
							}
						}
					}
					setState(935);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input, 87, _ctx);
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public final TypedValueContext typedValue() throws RecognitionException {
		TypedValueContext _localctx = new TypedValueContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_typedValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(936);
				type(0);
				setState(937);
				value();
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final ValueContext value() throws RecognitionException {
		ValueContext _localctx = new ValueContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_value);
		int _la;
		try {
			setState(1252);
			switch (_input.LA(1)) {
				case GlobalIdentifier:
					enterOuterAlt(_localctx, 1);
				{
					setState(939);
					match(GlobalIdentifier);
				}
				break;
				case LocalIdentifier:
					enterOuterAlt(_localctx, 2);
				{
					setState(940);
					match(LocalIdentifier);
				}
				break;
				case FloatLiteral:
					enterOuterAlt(_localctx, 3);
				{
					setState(941);
					match(FloatLiteral);
				}
				break;
				case IntegerLiteral:
					enterOuterAlt(_localctx, 4);
				{
					setState(942);
					match(IntegerLiteral);
				}
				break;
				case CharArrayLiteral:
					enterOuterAlt(_localctx, 5);
				{
					setState(943);
					match(CharArrayLiteral);
				}
				break;
				case T__149:
					enterOuterAlt(_localctx, 6);
				{
					setState(944);
					match(T__149);
				}
				break;
				case T__150:
					enterOuterAlt(_localctx, 7);
				{
					setState(945);
					match(T__150);
				}
				break;
				case T__151:
					enterOuterAlt(_localctx, 8);
				{
					setState(946);
					match(T__151);
				}
				break;
				case T__152:
					enterOuterAlt(_localctx, 9);
				{
					setState(947);
					match(T__152);
				}
				break;
				case T__153:
					enterOuterAlt(_localctx, 10);
				{
					setState(948);
					match(T__153);
				}
				break;
				case T__154:
					enterOuterAlt(_localctx, 11);
				{
					setState(949);
					match(T__154);
				}
				break;
				case T__8:
					enterOuterAlt(_localctx, 12);
				{
					setState(950);
					match(T__8);
					setState(951);
					typedValue();
					setState(956);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == T__0) {
						{
							{
								setState(952);
								match(T__0);
								setState(953);
								typedValue();
							}
						}
						setState(958);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(959);
					match(T__9);
				}
				break;
				case T__142:
					enterOuterAlt(_localctx, 13);
				{
					setState(961);
					match(T__142);
					setState(962);
					typedValue();
					setState(967);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == T__0) {
						{
							{
								setState(963);
								match(T__0);
								setState(964);
								typedValue();
							}
						}
						setState(969);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(970);
					match(T__144);
				}
				break;
				case T__51:
					enterOuterAlt(_localctx, 14);
				{
					setState(972);
					match(T__51);
					setState(973);
					typedValue();
					setState(978);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la == T__0) {
						{
							{
								setState(974);
								match(T__0);
								setState(975);
								typedValue();
							}
						}
						setState(980);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(981);
					match(T__52);
				}
				break;
				case T__155:
					enterOuterAlt(_localctx, 15);
				{
					setState(983);
					match(T__155);
					setState(985);
					_la = _input.LA(1);
					if (_la == T__156) {
						{
							setState(984);
							match(T__156);
						}
					}

					setState(988);
					_la = _input.LA(1);
					if (_la == T__10) {
						{
							setState(987);
							match(T__10);
						}
					}

					setState(991);
					_la = _input.LA(1);
					if (_la == T__157) {
						{
							setState(990);
							match(T__157);
						}
					}

					setState(993);
					match(String);
					setState(994);
					match(T__0);
					setState(995);
					match(String);
				}
				break;
				case T__158:
					enterOuterAlt(_localctx, 16);
				{
					setState(996);
					match(T__158);
					setState(997);
					match(T__4);
					setState(998);
					match(GlobalIdentifier);
					setState(999);
					match(T__0);
					setState(1000);
					match(LocalIdentifier);
					setState(1001);
					match(T__5);
				}
				break;
				case T__89:
					enterOuterAlt(_localctx, 17);
				{
					setState(1002);
					match(T__89);
					setState(1003);
					match(T__4);
					setState(1004);
					typedValue();
					setState(1005);
					match(T__55);
					setState(1006);
					type(0);
					setState(1007);
					match(T__5);
				}
				break;
				case T__90:
					enterOuterAlt(_localctx, 18);
				{
					setState(1009);
					match(T__90);
					setState(1010);
					match(T__4);
					setState(1011);
					typedValue();
					setState(1012);
					match(T__55);
					setState(1013);
					type(0);
					setState(1014);
					match(T__5);
				}
				break;
				case T__91:
					enterOuterAlt(_localctx, 19);
				{
					setState(1016);
					match(T__91);
					setState(1017);
					match(T__4);
					setState(1018);
					typedValue();
					setState(1019);
					match(T__55);
					setState(1020);
					type(0);
					setState(1021);
					match(T__5);
				}
				break;
				case T__92:
					enterOuterAlt(_localctx, 20);
				{
					setState(1023);
					match(T__92);
					setState(1024);
					match(T__4);
					setState(1025);
					typedValue();
					setState(1026);
					match(T__55);
					setState(1027);
					type(0);
					setState(1028);
					match(T__5);
				}
				break;
				case T__93:
					enterOuterAlt(_localctx, 21);
				{
					setState(1030);
					match(T__93);
					setState(1031);
					match(T__4);
					setState(1032);
					typedValue();
					setState(1033);
					match(T__55);
					setState(1034);
					type(0);
					setState(1035);
					match(T__5);
				}
				break;
				case T__94:
					enterOuterAlt(_localctx, 22);
				{
					setState(1037);
					match(T__94);
					setState(1038);
					match(T__4);
					setState(1039);
					typedValue();
					setState(1040);
					match(T__55);
					setState(1041);
					type(0);
					setState(1042);
					match(T__5);
				}
				break;
				case T__95:
					enterOuterAlt(_localctx, 23);
				{
					setState(1044);
					match(T__95);
					setState(1045);
					match(T__4);
					setState(1046);
					typedValue();
					setState(1047);
					match(T__55);
					setState(1048);
					type(0);
					setState(1049);
					match(T__5);
				}
				break;
				case T__96:
					enterOuterAlt(_localctx, 24);
				{
					setState(1051);
					match(T__96);
					setState(1052);
					match(T__4);
					setState(1053);
					typedValue();
					setState(1054);
					match(T__55);
					setState(1055);
					type(0);
					setState(1056);
					match(T__5);
				}
				break;
				case T__97:
					enterOuterAlt(_localctx, 25);
				{
					setState(1058);
					match(T__97);
					setState(1059);
					match(T__4);
					setState(1060);
					typedValue();
					setState(1061);
					match(T__55);
					setState(1062);
					type(0);
					setState(1063);
					match(T__5);
				}
				break;
				case T__98:
					enterOuterAlt(_localctx, 26);
				{
					setState(1065);
					match(T__98);
					setState(1066);
					match(T__4);
					setState(1067);
					typedValue();
					setState(1068);
					match(T__55);
					setState(1069);
					type(0);
					setState(1070);
					match(T__5);
				}
				break;
				case T__100:
					enterOuterAlt(_localctx, 27);
				{
					setState(1072);
					match(T__100);
					setState(1073);
					match(T__4);
					setState(1074);
					typedValue();
					setState(1075);
					match(T__55);
					setState(1076);
					type(0);
					setState(1077);
					match(T__5);
				}
				break;
				case T__101:
					enterOuterAlt(_localctx, 28);
				{
					setState(1079);
					match(T__101);
					setState(1080);
					match(T__4);
					setState(1081);
					typedValue();
					setState(1082);
					match(T__55);
					setState(1083);
					type(0);
					setState(1084);
					match(T__5);
				}
				break;
				case T__159:
					enterOuterAlt(_localctx, 29);
				{
					setState(1086);
					match(T__159);
					setState(1087);
					match(T__4);
					setState(1088);
					typedValue();
					setState(1091);
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
							{
								setState(1089);
								match(T__0);
								setState(1090);
								index();
							}
						}
						setState(1093);
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while (_la == T__0);
					setState(1095);
					match(T__5);
				}
				break;
				case T__160:
					enterOuterAlt(_localctx, 30);
				{
					setState(1097);
					match(T__160);
					setState(1098);
					match(T__4);
					setState(1099);
					value();
					setState(1100);
					match(T__0);
					setState(1101);
					value();
					setState(1104);
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
							{
								setState(1102);
								match(T__0);
								setState(1103);
								index();
							}
						}
						setState(1106);
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while (_la == T__0);
					setState(1108);
					match(T__5);
				}
				break;
				case T__87:
					enterOuterAlt(_localctx, 31);
				{
					setState(1110);
					match(T__87);
					setState(1111);
					match(FPPredicate);
					setState(1112);
					match(T__4);
					setState(1113);
					typedValue();
					setState(1114);
					match(T__0);
					setState(1115);
					typedValue();
					setState(1116);
					match(T__5);
				}
				break;
				case T__88:
					enterOuterAlt(_localctx, 32);
				{
					setState(1118);
					match(T__88);
					setState(1119);
					match(FPPredicate);
					setState(1120);
					match(T__4);
					setState(1121);
					typedValue();
					setState(1122);
					match(T__0);
					setState(1123);
					typedValue();
					setState(1124);
					match(T__5);
				}
				break;
				case T__66:
					enterOuterAlt(_localctx, 33);
				{
					setState(1126);
					match(T__66);
					setState(1127);
					match(T__4);
					setState(1128);
					typedValue();
					setState(1129);
					match(T__0);
					setState(1130);
					typedValue();
					setState(1131);
					match(T__5);
				}
				break;
				case T__72:
					enterOuterAlt(_localctx, 34);
				{
					setState(1133);
					match(T__72);
					setState(1134);
					match(T__4);
					setState(1135);
					typedValue();
					setState(1136);
					match(T__0);
					setState(1137);
					typedValue();
					setState(1138);
					match(T__5);
				}
				break;
				case T__69:
					enterOuterAlt(_localctx, 35);
				{
					setState(1140);
					match(T__69);
					setState(1141);
					match(T__4);
					setState(1142);
					typedValue();
					setState(1143);
					match(T__0);
					setState(1144);
					typedValue();
					setState(1145);
					match(T__5);
				}
				break;
				case T__73:
					enterOuterAlt(_localctx, 36);
				{
					setState(1147);
					match(T__73);
					setState(1148);
					match(T__4);
					setState(1149);
					typedValue();
					setState(1150);
					match(T__0);
					setState(1151);
					typedValue();
					setState(1152);
					match(T__5);
				}
				break;
				case T__70:
					enterOuterAlt(_localctx, 37);
				{
					setState(1154);
					match(T__70);
					setState(1155);
					match(T__4);
					setState(1156);
					typedValue();
					setState(1157);
					match(T__0);
					setState(1158);
					typedValue();
					setState(1159);
					match(T__5);
				}
				break;
				case T__74:
					enterOuterAlt(_localctx, 38);
				{
					setState(1161);
					match(T__74);
					setState(1162);
					match(T__4);
					setState(1163);
					typedValue();
					setState(1164);
					match(T__0);
					setState(1165);
					typedValue();
					setState(1166);
					match(T__5);
				}
				break;
				case T__79:
					enterOuterAlt(_localctx, 39);
				{
					setState(1168);
					match(T__79);
					setState(1169);
					match(T__4);
					setState(1170);
					typedValue();
					setState(1171);
					match(T__0);
					setState(1172);
					typedValue();
					setState(1173);
					match(T__5);
				}
				break;
				case T__77:
					enterOuterAlt(_localctx, 40);
				{
					setState(1175);
					match(T__77);
					setState(1176);
					match(T__4);
					setState(1177);
					typedValue();
					setState(1178);
					match(T__0);
					setState(1179);
					typedValue();
					setState(1180);
					match(T__5);
				}
				break;
				case T__75:
					enterOuterAlt(_localctx, 41);
				{
					setState(1182);
					match(T__75);
					setState(1183);
					match(T__4);
					setState(1184);
					typedValue();
					setState(1185);
					match(T__0);
					setState(1186);
					typedValue();
					setState(1187);
					match(T__5);
				}
				break;
				case T__82:
					enterOuterAlt(_localctx, 42);
				{
					setState(1189);
					match(T__82);
					setState(1190);
					match(T__4);
					setState(1191);
					typedValue();
					setState(1192);
					match(T__0);
					setState(1193);
					typedValue();
					setState(1194);
					match(T__5);
				}
				break;
				case T__83:
					enterOuterAlt(_localctx, 43);
				{
					setState(1196);
					match(T__83);
					setState(1197);
					match(T__4);
					setState(1198);
					typedValue();
					setState(1199);
					match(T__0);
					setState(1200);
					typedValue();
					setState(1201);
					match(T__5);
				}
				break;
				case T__76:
					enterOuterAlt(_localctx, 44);
				{
					setState(1203);
					match(T__76);
					setState(1204);
					match(T__4);
					setState(1205);
					typedValue();
					setState(1206);
					match(T__0);
					setState(1207);
					typedValue();
					setState(1208);
					match(T__5);
				}
				break;
				case T__71:
					enterOuterAlt(_localctx, 45);
				{
					setState(1210);
					match(T__71);
					setState(1211);
					match(T__4);
					setState(1212);
					typedValue();
					setState(1213);
					match(T__0);
					setState(1214);
					typedValue();
					setState(1215);
					match(T__5);
				}
				break;
				case T__161:
					enterOuterAlt(_localctx, 46);
				{
					setState(1217);
					match(T__161);
					setState(1218);
					match(T__4);
					setState(1219);
					typedValue();
					setState(1220);
					match(T__0);
					setState(1221);
					typedValue();
					setState(1222);
					match(T__5);
				}
				break;
				case T__81:
					enterOuterAlt(_localctx, 47);
				{
					setState(1224);
					match(T__81);
					setState(1225);
					match(T__4);
					setState(1226);
					typedValue();
					setState(1227);
					match(T__0);
					setState(1228);
					typedValue();
					setState(1229);
					match(T__5);
				}
				break;
				case T__84:
					enterOuterAlt(_localctx, 48);
				{
					setState(1231);
					match(T__84);
					setState(1232);
					match(T__4);
					setState(1233);
					typedValue();
					setState(1234);
					match(T__0);
					setState(1235);
					typedValue();
					setState(1236);
					match(T__5);
				}
				break;
				case T__85:
					enterOuterAlt(_localctx, 49);
				{
					setState(1238);
					match(T__85);
					setState(1239);
					match(T__4);
					setState(1240);
					typedValue();
					setState(1241);
					match(T__0);
					setState(1242);
					typedValue();
					setState(1243);
					match(T__5);
				}
				break;
				case T__86:
					enterOuterAlt(_localctx, 50);
				{
					setState(1245);
					match(T__86);
					setState(1246);
					match(T__4);
					setState(1247);
					typedValue();
					setState(1248);
					match(T__0);
					setState(1249);
					typedValue();
					setState(1250);
					match(T__5);
				}
				break;
				default:
					throw new NoViableAltException(this);
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public final IndexContext index() throws RecognitionException {
		IndexContext _localctx = new IndexContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
				setState(1254);
				_la = _input.LA(1);
				if (!(_la == MetadataIdentifier || _la == IntegerLiteral)) {
					_errHandler.recoverInline(this);
				} else {
					consume();
				}
			}
		} catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		} finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
			case 17:
				return type_sempred((TypeContext) _localctx, predIndex);
		}
		return true;
	}

	private boolean type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
			case 0:
				return precpred(_ctx, 12);
			case 1:
				return precpred(_ctx, 2);
		}
		return true;
	}

	public static class ModuleContext extends ParserRuleContext {
		public ModuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<EntityContext> entity() {
			return getRuleContexts(EntityContext.class);
		}

		public EntityContext entity(int i) {
			return getRuleContext(EntityContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_module;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterModule(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitModule(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitModule(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class ArgumentListContext extends ParserRuleContext {
		public ArgumentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<TypedValueContext> typedValue() {
			return getRuleContexts(TypedValueContext.class);
		}

		public TypedValueContext typedValue(int i) {
			return getRuleContext(TypedValueContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_argumentList;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterArgumentList(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitArgumentList(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitArgumentList(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class BasicBlockContext extends ParserRuleContext {
		public BasicBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode Label() {
			return getToken(LLVMParser.Label, 0);
		}

		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}

		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_basicBlock;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterBasicBlock(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitBasicBlock(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitBasicBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class ClauseContext extends ParserRuleContext {
		public ClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TypedValueContext typedValue() {
			return getRuleContext(TypedValueContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_clause;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterClause(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitClause(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class ComdatContext extends ParserRuleContext {
		public ComdatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode ComdatIdentifier() {
			return getToken(LLVMParser.ComdatIdentifier, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_comdat;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterComdat(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitComdat(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitComdat(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class EntityContext extends ParserRuleContext {
		public EntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public FunctionHeaderContext functionHeader() {
			return getRuleContext(FunctionHeaderContext.class, 0);
		}

		public FunctionBodyContext functionBody() {
			return getRuleContext(FunctionBodyContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_entity;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterEntity(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitEntity(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class FunctionAttributeContext extends ParserRuleContext {
		public FunctionAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode AttributeGroupID() {
			return getToken(LLVMParser.AttributeGroupID, 0);
		}

		public List<FunctionAttributeContext> functionAttribute() {
			return getRuleContexts(FunctionAttributeContext.class);
		}

		public FunctionAttributeContext functionAttribute(int i) {
			return getRuleContext(FunctionAttributeContext.class, i);
		}

		public TerminalNode IntegerLiteral() {
			return getToken(LLVMParser.IntegerLiteral, 0);
		}

		public TerminalNode String() {
			return getToken(LLVMParser.String, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_functionAttribute;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterFunctionAttribute(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitFunctionAttribute(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor)
				return ((LLVMVisitor<? extends T>) visitor).visitFunctionAttribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class FunctionHeaderContext extends ParserRuleContext {
		public FunctionHeaderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TypeContext type() {
			return getRuleContext(TypeContext.class, 0);
		}

		public TerminalNode GlobalIdentifier() {
			return getToken(LLVMParser.GlobalIdentifier, 0);
		}

		public TerminalNode Linkage() {
			return getToken(LLVMParser.Linkage, 0);
		}

		public TerminalNode Visibility() {
			return getToken(LLVMParser.Visibility, 0);
		}

		public TerminalNode DllStorageClass() {
			return getToken(LLVMParser.DllStorageClass, 0);
		}

		public TerminalNode CallingConvention() {
			return getToken(LLVMParser.CallingConvention, 0);
		}

		public List<ReturnAttributeContext> returnAttribute() {
			return getRuleContexts(ReturnAttributeContext.class);
		}

		public ReturnAttributeContext returnAttribute(int i) {
			return getRuleContext(ReturnAttributeContext.class, i);
		}

		public ParameterListContext parameterList() {
			return getRuleContext(ParameterListContext.class, 0);
		}

		public TerminalNode UnamedAddress() {
			return getToken(LLVMParser.UnamedAddress, 0);
		}

		public List<FunctionAttributeContext> functionAttribute() {
			return getRuleContexts(FunctionAttributeContext.class);
		}

		public FunctionAttributeContext functionAttribute(int i) {
			return getRuleContext(FunctionAttributeContext.class, i);
		}

		public SectionContext section() {
			return getRuleContext(SectionContext.class, 0);
		}

		public ComdatContext comdat() {
			return getRuleContext(ComdatContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_functionHeader;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterFunctionHeader(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitFunctionHeader(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitFunctionHeader(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class FunctionBodyContext extends ParserRuleContext {
		public FunctionBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<BasicBlockContext> basicBlock() {
			return getRuleContexts(BasicBlockContext.class);
		}

		public BasicBlockContext basicBlock(int i) {
			return getRuleContext(BasicBlockContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_functionBody;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterFunctionBody(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitFunctionBody(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitFunctionBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class InstructionContext extends ParserRuleContext {
		public InstructionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<TypedValueContext> typedValue() {
			return getRuleContexts(TypedValueContext.class);
		}

		public TypedValueContext typedValue(int i) {
			return getRuleContext(TypedValueContext.class, i);
		}

		public TypeContext type() {
			return getRuleContext(TypeContext.class, 0);
		}

		public TerminalNode GlobalIdentifier() {
			return getToken(LLVMParser.GlobalIdentifier, 0);
		}

		public TerminalNode CallingConvention() {
			return getToken(LLVMParser.CallingConvention, 0);
		}

		public List<ReturnAttributeContext> returnAttribute() {
			return getRuleContexts(ReturnAttributeContext.class);
		}

		public ReturnAttributeContext returnAttribute(int i) {
			return getRuleContext(ReturnAttributeContext.class, i);
		}

		public ArgumentListContext argumentList() {
			return getRuleContext(ArgumentListContext.class, 0);
		}

		public List<FunctionAttributeContext> functionAttribute() {
			return getRuleContexts(FunctionAttributeContext.class);
		}

		public FunctionAttributeContext functionAttribute(int i) {
			return getRuleContext(FunctionAttributeContext.class, i);
		}

		public List<OperandBundleContext> operandBundle() {
			return getRuleContexts(OperandBundleContext.class);
		}

		public OperandBundleContext operandBundle(int i) {
			return getRuleContext(OperandBundleContext.class, i);
		}

		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}

		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class, i);
		}

		public List<TerminalNode> FastMathsFlag() {
			return getTokens(LLVMParser.FastMathsFlag);
		}

		public TerminalNode FastMathsFlag(int i) {
			return getToken(LLVMParser.FastMathsFlag, i);
		}

		public TerminalNode IntPredicate() {
			return getToken(LLVMParser.IntPredicate, 0);
		}

		public TerminalNode FPPredicate() {
			return getToken(LLVMParser.FPPredicate, 0);
		}

		public List<ClauseContext> clause() {
			return getRuleContexts(ClauseContext.class);
		}

		public ClauseContext clause(int i) {
			return getRuleContext(ClauseContext.class, i);
		}

		public TerminalNode IntegerLiteral() {
			return getToken(LLVMParser.IntegerLiteral, 0);
		}

		public TerminalNode AtomicOrdering() {
			return getToken(LLVMParser.AtomicOrdering, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_instruction;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterInstruction(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitInstruction(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitInstruction(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class OperandBundleContext extends ParserRuleContext {
		public OperandBundleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode String() {
			return getToken(LLVMParser.String, 0);
		}

		public List<TypedValueContext> typedValue() {
			return getRuleContexts(TypedValueContext.class);
		}

		public TypedValueContext typedValue(int i) {
			return getRuleContext(TypedValueContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_operandBundle;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterOperandBundle(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitOperandBundle(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitOperandBundle(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class ParameterContext extends ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TypeContext type() {
			return getRuleContext(TypeContext.class, 0);
		}

		public List<ParameterAttributeContext> parameterAttribute() {
			return getRuleContexts(ParameterAttributeContext.class);
		}

		public ParameterAttributeContext parameterAttribute(int i) {
			return getRuleContext(ParameterAttributeContext.class, i);
		}

		public TerminalNode LocalIdentifier() {
			return getToken(LLVMParser.LocalIdentifier, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_parameter;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterParameter(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitParameter(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class ParameterAttributeContext extends ParserRuleContext {
		public ParameterAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode IntegerLiteral() {
			return getToken(LLVMParser.IntegerLiteral, 0);
		}

		public TerminalNode String() {
			return getToken(LLVMParser.String, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_parameterAttribute;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterParameterAttribute(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitParameterAttribute(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor)
				return ((LLVMVisitor<? extends T>) visitor).visitParameterAttribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class ParameterListContext extends ParserRuleContext {
		public ParameterListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}

		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class, i);
		}

		@Override
		public int getRuleIndex() {
			return RULE_parameterList;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterParameterList(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitParameterList(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitParameterList(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class ReturnAttributeContext extends ParserRuleContext {
		public ReturnAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode String() {
			return getToken(LLVMParser.String, 0);
		}

		public TerminalNode IntegerLiteral() {
			return getToken(LLVMParser.IntegerLiteral, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_returnAttribute;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterReturnAttribute(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitReturnAttribute(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitReturnAttribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class SectionContext extends ParserRuleContext {
		public SectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode String() {
			return getToken(LLVMParser.String, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_section;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterSection(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitSection(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitSection(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class StatementContext extends ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public InstructionContext instruction() {
			return getRuleContext(InstructionContext.class, 0);
		}

		public TerminalNode LocalIdentifier() {
			return getToken(LLVMParser.LocalIdentifier, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_statement;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterStatement(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitStatement(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class TypeContext extends ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TypeContext() {
		}

		@Override
		public int getRuleIndex() {
			return RULE_type;
		}

		public void copyFrom(TypeContext ctx) {
			super.copyFrom(ctx);
		}
	}

	public static class StructContext extends TypeContext {
		public StructContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}

		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class, i);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterStruct(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitStruct(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitStruct(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class MetadataContext extends TypeContext {
		public MetadataContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterMetadata(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitMetadata(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitMetadata(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class PointerContext extends TypeContext {
		public PointerContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		public TypeContext type() {
			return getRuleContext(TypeContext.class, 0);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterPointer(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitPointer(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitPointer(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class HalfContext extends TypeContext {
		public HalfContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterHalf(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitHalf(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitHalf(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class OpaqueContext extends TypeContext {
		public OpaqueContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterOpaque(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitOpaque(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitOpaque(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class VoidContext extends TypeContext {
		public VoidContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterVoid(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitVoid(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitVoid(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class DoubleContext extends TypeContext {
		public DoubleContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterDouble(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitDouble(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitDouble(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class IntegerContext extends TypeContext {
		public IntegerContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		public TerminalNode IntegerType() {
			return getToken(LLVMParser.IntegerType, 0);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterInteger(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitInteger(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitInteger(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class LabelContext extends TypeContext {
		public LabelContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterLabel(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitLabel(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class FloatContext extends TypeContext {
		public FloatContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterFloat(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitFloat(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitFloat(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class PackedStructContext extends TypeContext {
		public PackedStructContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}

		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class, i);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterPackedStruct(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitPackedStruct(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitPackedStruct(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class X86_mmxContext extends TypeContext {
		public X86_mmxContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterX86_mmx(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitX86_mmx(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitX86_mmx(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class TokenContext extends TypeContext {
		public TokenContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterToken(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitToken(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitToken(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class X86_fp80Context extends TypeContext {
		public X86_fp80Context(TypeContext ctx) {
			copyFrom(ctx);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterX86_fp80(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitX86_fp80(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitX86_fp80(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class ArrayContext extends TypeContext {
		public ArrayContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		public TerminalNode IntegerLiteral() {
			return getToken(LLVMParser.IntegerLiteral, 0);
		}

		public TypeContext type() {
			return getRuleContext(TypeContext.class, 0);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterArray(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitArray(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitArray(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class VectorContext extends TypeContext {
		public VectorContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		public TerminalNode IntegerLiteral() {
			return getToken(LLVMParser.IntegerLiteral, 0);
		}

		public TypeContext type() {
			return getRuleContext(TypeContext.class, 0);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterVector(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitVector(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitVector(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class Ppc_fp128Context extends TypeContext {
		public Ppc_fp128Context(TypeContext ctx) {
			copyFrom(ctx);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterPpc_fp128(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitPpc_fp128(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitPpc_fp128(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class FunctionTypeContext extends TypeContext {
		public FunctionTypeContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}

		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class, i);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterFunctionType(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitFunctionType(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitFunctionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class Fp128Context extends TypeContext {
		public Fp128Context(TypeContext ctx) {
			copyFrom(ctx);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterFp128(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitFp128(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitFp128(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class IdentifiedTypeContext extends TypeContext {
		public IdentifiedTypeContext(TypeContext ctx) {
			copyFrom(ctx);
		}

		public TerminalNode LocalIdentifier() {
			return getToken(LLVMParser.LocalIdentifier, 0);
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterIdentifiedType(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitIdentifiedType(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitIdentifiedType(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class TypedValueContext extends ParserRuleContext {
		public TypedValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TypeContext type() {
			return getRuleContext(TypeContext.class, 0);
		}

		public ValueContext value() {
			return getRuleContext(ValueContext.class, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_typedValue;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterTypedValue(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitTypedValue(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitTypedValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class ValueContext extends ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode GlobalIdentifier() {
			return getToken(LLVMParser.GlobalIdentifier, 0);
		}

		public TerminalNode LocalIdentifier() {
			return getToken(LLVMParser.LocalIdentifier, 0);
		}

		public TerminalNode FloatLiteral() {
			return getToken(LLVMParser.FloatLiteral, 0);
		}

		public TerminalNode IntegerLiteral() {
			return getToken(LLVMParser.IntegerLiteral, 0);
		}

		public TerminalNode CharArrayLiteral() {
			return getToken(LLVMParser.CharArrayLiteral, 0);
		}

		public List<TypedValueContext> typedValue() {
			return getRuleContexts(TypedValueContext.class);
		}

		public TypedValueContext typedValue(int i) {
			return getRuleContext(TypedValueContext.class, i);
		}

		public List<TerminalNode> String() {
			return getTokens(LLVMParser.String);
		}

		public TerminalNode String(int i) {
			return getToken(LLVMParser.String, i);
		}

		public TypeContext type() {
			return getRuleContext(TypeContext.class, 0);
		}

		public List<IndexContext> index() {
			return getRuleContexts(IndexContext.class);
		}

		public IndexContext index(int i) {
			return getRuleContext(IndexContext.class, i);
		}

		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}

		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class, i);
		}

		public TerminalNode FPPredicate() {
			return getToken(LLVMParser.FPPredicate, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_value;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterValue(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitValue(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public static class IndexContext extends ParserRuleContext {
		public IndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}

		public TerminalNode IntegerLiteral() {
			return getToken(LLVMParser.IntegerLiteral, 0);
		}

		public TerminalNode MetadataIdentifier() {
			return getToken(LLVMParser.MetadataIdentifier, 0);
		}

		@Override
		public int getRuleIndex() {
			return RULE_index;
		}

		@Override
		public void enterRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).enterIndex(this);
		}

		@Override
		public void exitRule(ParseTreeListener listener) {
			if (listener instanceof LLVMListener) ((LLVMListener) listener).exitIndex(this);
		}

		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if (visitor instanceof LLVMVisitor) return ((LLVMVisitor<? extends T>) visitor).visitIndex(this);
			else return visitor.visitChildren(this);
		}
	}
}